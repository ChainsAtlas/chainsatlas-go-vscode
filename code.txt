===== FILE: .eslintrc.json =====
{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module"
  },
  "plugins": ["@typescript-eslint"],
  "rules": {
    "@typescript-eslint/semi": "warn",
    "curly": "warn",
    "eqeqeq": "warn",
    "no-throw-literal": "warn",
    "react/react-in-jsx-scope": "off",
    "semi": "off"
  },
  "settings": { "react": { "version": "detect" } },
  "ignorePatterns": ["out", "dist", "**/*.d.ts"],
  "extends": [
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:prettier/recommended"
  ]
}



===== FILE: .gitignore =====
dist
node_modules
.env


===== FILE: .husky/pre-commit =====
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

yarn run lint && yarn run format



===== FILE: .prettierrc =====
{
    "printWidth": 80,
    "tabWidth": 2,
    "useTabs": false,
    "semi": true,
    "singleQuote": false,
    "quoteProps": "as-needed",
    "jsxSingleQuote": false,
    "trailingComma": "all",
    "bracketSpacing": true,
    "bracketSameLine": false,
    "arrowParens": "always",
    "proseWrap": "preserve",
    "requirePragma": false,
    "insertPragma": false,
    "endOfLine": "lf",
    "embeddedLanguageFormatting": "auto",
    "singleAttributePerLine": false,
    "plugins": [
        "prettier-plugin-organize-imports"
    ]
}


===== FILE: .vscode/extensions.json =====
{
  // See http://go.microsoft.com/fwlink/?LinkId=827846
  // for the documentation about the extensions.json format
  "recommendations": ["dbaeumer.vscode-eslint", "amodio.tsl-problem-matcher"]
}



===== FILE: .vscode/launch.json =====
// A launch configuration that compiles the extension and then opens it inside a new window
// Use IntelliSense to learn about possible attributes.
// Hover to view descriptions of existing attributes.
// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
{
	"version": "0.2.0",
	"configurations": [
		{
			"name": "Run Extension",
			"type": "extensionHost",
			"request": "launch",
			"args": [
				"--extensionDevelopmentPath=${workspaceFolder}"
			],
			"outFiles": [
				"${workspaceFolder}/dist/**/*.js"
			],
			"preLaunchTask": "${defaultBuildTask}"
		},
		{
			"name": "Extension Tests",
			"type": "extensionHost",
			"request": "launch",
			"args": [
				"--extensionDevelopmentPath=${workspaceFolder}",
				"--extensionTestsPath=${workspaceFolder}/out/test/suite/index"
			],
			"outFiles": [
				"${workspaceFolder}/out/**/*.js",
				"${workspaceFolder}/dist/**/*.js"
			],
			"preLaunchTask": "tasks: watch-tests"
		}
	]
}



===== FILE: .vscode/settings.json =====
// Place your settings in this file to overwrite default and user settings.
{
  "files.exclude": {
    "out": false, // set this to true to hide the "out" folder with the compiled JS files
    "dist": false // set this to true to hide the "dist" folder with the compiled JS files
  },
  "search.exclude": {
    "out": true, // set this to false to include "out" folder in search results
    "dist": true // set this to false to include "dist" folder in search results
  },
  // Turn off tsc task auto detection since we have the necessary tasks as npm scripts
  "typescript.tsc.autoDetect": "off",
  "cmake.configureOnOpen": false
}



===== FILE: .vscode/tasks.json =====
// See https://go.microsoft.com/fwlink/?LinkId=733558
// for the documentation about the tasks.json format
{
	"version": "2.0.0",
	"tasks": [
		{
			"type": "npm",
			"script": "watch",
			"problemMatcher": "$ts-webpack-watch",
			"isBackground": true,
			"presentation": {
				"reveal": "never",
				"group": "watchers"
			},
			"group": {
				"kind": "build",
				"isDefault": true
			}
		},
		{
			"type": "npm",
			"script": "watch-tests",
			"problemMatcher": "$tsc-watch",
			"isBackground": true,
			"presentation": {
				"reveal": "never",
				"group": "watchers"
			},
			"group": "build"
		},
		{
			"label": "tasks: watch-tests",
			"dependsOn": [
				"npm: watch",
				"npm: watch-tests"
			],
			"problemMatcher": []
		}
	]
}



===== FILE: .vscodeignore =====
.vscode/**
.vscode-test/**
out/**
node_modules/**
src/**
.gitignore
.yarnrc
webpack.config.js
vsc-extension-quickstart.md
**/tsconfig.json
**/.eslintrc.json
**/*.map
**/*.ts



===== FILE: .yarnrc =====
--ignore-engines true


===== FILE: CHANGELOG.md =====
# Change Log

All notable changes to the "chainsatlas-go" extension will be documented in this file.

Check [Keep a Changelog](http://keepachangelog.com/) for recommendations on how to structure this file.

## [Unreleased]

- Initial release


===== FILE: README.md =====
# chainsatlas-go README

This is the README for your extension "chainsatlas-go". After writing up a brief description, we recommend including the following sections.

## Features

Describe specific features of your extension including screenshots of your extension in action. Image paths are relative to this README file.

For example if there is an image subfolder under your extension project workspace:

\!\[feature X\]\(images/feature-x.png\)

> Tip: Many popular extensions utilize animations. This is an excellent way to show off your extension! We recommend short, focused animations that are easy to follow.

## Requirements

If you have any requirements or dependencies, add a section describing those and how to install and configure them.

## Extension Settings

Include if your extension adds any VS Code settings through the `contributes.configuration` extension point.

For example:

This extension contributes the following settings:

* `myExtension.enable`: Enable/disable this extension.
* `myExtension.thing`: Set to `blah` to do something.

## Known Issues

Calling out known issues can help limit users opening duplicate issues against your extension.

## Release Notes

Users appreciate release notes as you update your extension.

### 1.0.0

Initial release of ...

### 1.0.1

Fixed issue #.

### 1.1.0

Added features X, Y, and Z.

---

## Following extension guidelines

Ensure that you've read through the extensions guidelines and follow the best practices for creating your extension.

* [Extension Guidelines](https://code.visualstudio.com/api/references/extension-guidelines)

## Working with Markdown

You can author your README using Visual Studio Code. Here are some useful editor keyboard shortcuts:

* Split the editor (`Cmd+\` on macOS or `Ctrl+\` on Windows and Linux).
* Toggle preview (`Shift+Cmd+V` on macOS or `Shift+Ctrl+V` on Windows and Linux).
* Press `Ctrl+Space` (Windows, Linux, macOS) to see a list of Markdown snippets.

## For more information

* [Visual Studio Code's Markdown Support](http://code.visualstudio.com/docs/languages/markdown)
* [Markdown Syntax Reference](https://help.github.com/articles/markdown-basics/)

**Enjoy!**



===== FILE: assets/img/logo.svg =====
<svg id="svg" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="400" height="400" viewBox="0, 0, 400,400"><g id="svgg"><path id="path0" d="M162.926 13.705 C 149.506 16.372,141.004 29.341,143.996 42.582 L 144.395 44.344 133.161 55.578 L 121.926 66.813 120.144 66.369 C 111.849 64.303,101.457 67.923,96.126 74.736 C 87.350 85.952,90.057 102.836,101.789 110.056 L 103.642 111.196 103.640 127.063 L 103.637 142.930 102.019 143.876 C 98.689 145.823,95.232 149.629,93.348 153.423 C 84.333 171.576,100.145 191.806,120.111 187.665 L 122.117 187.249 133.253 198.385 L 144.390 209.521 143.917 211.543 C 141.039 223.851,148.629 236.468,160.982 239.910 C 171.040 242.712,182.542 238.338,187.716 229.742 L 188.740 228.041 204.607 228.043 L 220.473 228.044 221.608 229.865 C 228.917 241.603,245.242 244.393,256.430 235.817 C 263.989 230.024,267.415 220.116,265.080 210.801 L 264.773 209.574 275.892 198.440 C 285.633 188.686,287.092 187.321,287.652 187.429 C 293.047 188.468,296.019 188.534,299.680 187.696 C 317.679 183.577,324.441 161.525,311.918 147.787 C 310.521 146.255,306.997 143.478,306.080 143.187 C 305.573 143.026,305.566 142.820,305.570 127.110 L 305.573 111.196 307.545 109.917 C 329.647 95.578,314.846 60.592,289.151 66.437 L 287.326 66.852 276.081 55.607 L 264.836 44.362 265.216 42.463 C 267.610 30.473,261.509 19.195,250.282 14.858 C 239.757 10.791,227.069 15.090,221.344 24.663 L 220.482 26.104 204.611 26.101 L 188.740 26.099 187.628 24.298 C 182.691 16.295,172.305 11.841,162.926 13.705 M218.109 33.077 C 217.088 38.773,218.562 46.092,221.628 50.548 C 222.079 51.204,222.350 51.835,222.229 51.950 C 221.950 52.214,204.973 59.203,204.616 59.201 C 204.269 59.199,187.274 52.191,186.976 51.927 C 186.848 51.814,187.094 51.185,187.536 50.495 C 190.654 45.624,192.231 37.832,191.113 32.821 L 190.928 31.990 204.616 31.990 L 218.304 31.990 218.109 33.077 M147.769 51.194 C 150.929 55.969,157.225 60.009,163.084 61.022 C 164.300 61.232,164.600 60.192,160.382 70.365 L 156.726 79.182 147.831 82.870 C 142.939 84.899,138.887 86.509,138.826 86.448 C 138.764 86.387,138.437 85.243,138.098 83.907 C 136.732 78.522,132.975 73.019,128.774 70.248 L 127.669 69.519 137.345 59.839 C 142.668 54.516,147.036 50.160,147.054 50.160 C 147.071 50.160,147.393 50.625,147.769 51.194 M271.862 59.834 L 281.534 69.508 280.123 70.480 C 275.888 73.397,272.269 78.808,270.947 84.199 C 270.637 85.465,270.319 86.500,270.241 86.500 C 270.163 86.500,266.135 84.852,261.291 82.837 L 252.484 79.174 248.830 70.361 C 246.820 65.514,245.174 61.478,245.172 61.391 C 245.171 61.304,246.004 61.034,247.025 60.790 C 252.870 59.393,258.482 55.669,261.408 51.247 C 261.804 50.649,262.142 50.160,262.159 50.160 C 262.177 50.160,266.543 54.513,271.862 59.834 M189.763 59.508 C 193.423 61.020,196.503 62.333,196.608 62.426 C 196.745 62.548,186.929 66.766,183.011 68.269 C 182.608 68.424,178.783 58.556,179.163 58.343 C 179.366 58.229,180.107 57.744,180.809 57.265 C 181.717 56.645,182.234 56.446,182.598 56.576 C 182.879 56.676,186.104 57.995,189.763 59.508 M228.518 57.364 C 229.231 57.807,229.814 58.196,229.814 58.228 C 229.814 58.863,225.691 67.927,225.429 67.868 C 224.559 67.673,212.452 62.575,212.572 62.454 C 212.834 62.192,226.365 56.603,226.790 56.580 C 227.027 56.568,227.805 56.921,228.518 57.364 M236.718 60.796 C 237.771 61.016,238.664 61.227,238.702 61.265 C 238.945 61.508,244.656 75.583,244.553 75.686 C 244.385 75.854,230.854 70.304,230.845 70.064 C 230.839 69.900,234.703 60.396,234.776 60.397 C 234.792 60.397,235.666 60.577,236.718 60.796 M175.854 65.456 C 176.931 68.093,177.738 70.324,177.646 70.415 C 177.343 70.716,164.794 75.820,164.668 75.694 C 164.567 75.592,170.270 61.497,170.499 61.282 C 170.619 61.169,172.845 60.709,173.385 60.685 C 173.814 60.667,174.212 61.437,175.854 65.456 M213.977 69.517 C 218.958 71.577,223.125 73.346,223.239 73.447 C 223.424 73.612,204.699 119.126,204.262 119.573 C 204.161 119.676,200.407 110.866,195.918 99.995 C 191.430 89.125,187.154 78.772,186.416 76.989 L 185.073 73.748 194.584 69.778 C 199.815 67.595,204.281 65.801,204.508 65.790 C 204.735 65.780,208.996 67.457,213.977 69.517 M189.633 98.889 C 194.854 111.535,199.092 121.966,199.051 122.068 C 198.943 122.337,153.301 103.315,153.297 102.999 C 153.293 102.562,160.991 84.092,161.313 83.767 C 161.576 83.502,179.959 75.758,180.089 75.857 C 180.117 75.879,184.412 86.243,189.633 98.889 M238.291 79.609 C 243.411 81.730,247.737 83.602,247.903 83.767 C 248.303 84.168,255.709 102.098,255.604 102.413 C 255.516 102.677,209.857 121.613,209.577 121.501 C 209.302 121.391,228.367 75.752,228.688 75.752 C 228.849 75.752,233.171 77.487,238.291 79.609 M152.363 89.763 C 151.727 91.276,150.439 94.385,149.500 96.672 C 148.561 98.959,147.700 100.830,147.586 100.831 C 146.468 100.837,137.920 96.843,138.046 96.373 C 138.124 96.080,138.318 95.188,138.478 94.389 L 138.767 92.936 143.280 91.075 C 145.762 90.052,148.944 88.727,150.352 88.131 C 151.759 87.535,153.048 87.039,153.215 87.030 C 153.393 87.019,153.038 88.157,152.363 89.763 M262.980 89.856 C 266.767 91.420,269.998 92.752,270.160 92.816 C 270.433 92.925,271.196 96.163,270.984 96.318 C 270.791 96.460,261.919 100.040,261.576 100.114 C 261.330 100.168,260.374 98.164,258.472 93.602 C 256.960 89.978,255.807 87.012,255.909 87.012 C 256.011 87.012,259.193 88.292,262.980 89.856 M274.152 102.900 C 274.680 103.752,275.112 104.585,275.112 104.750 C 275.112 105.078,269.500 118.756,269.241 119.061 C 269.153 119.164,267.789 116.122,266.211 112.301 C 264.632 108.480,263.375 105.318,263.417 105.276 C 263.579 105.114,272.693 101.360,272.937 101.355 C 273.077 101.352,273.624 102.047,274.152 102.900 M140.755 103.873 C 143.966 105.234,145.466 105.994,145.416 106.235 C 145.219 107.193,140.113 119.227,139.974 119.063 C 139.709 118.752,134.101 105.055,134.101 104.719 C 134.101 104.383,135.683 101.864,135.893 101.866 C 135.963 101.867,138.151 102.770,140.755 103.873 M262.028 117.482 C 264.157 122.629,265.898 126.947,265.896 127.079 C 265.890 127.686,258.214 145.745,257.962 145.745 C 257.569 145.745,211.917 126.840,211.908 126.673 C 211.890 126.350,257.846 107.574,257.998 107.842 C 258.086 107.998,259.900 112.336,262.028 117.482 M174.593 117.927 C 187.081 123.093,197.302 127.380,197.306 127.453 C 197.310 127.527,188.474 131.238,177.671 135.700 C 166.868 140.163,156.521 144.438,154.677 145.200 L 151.324 146.587 147.319 136.936 C 145.116 131.627,143.314 127.185,143.314 127.064 C 143.314 126.877,150.024 110.557,150.812 108.828 C 150.989 108.440,151.223 108.286,151.485 108.384 C 151.706 108.466,162.105 112.761,174.593 117.927 M133.253 118.251 L 136.902 127.060 133.300 135.763 C 129.144 145.804,129.547 145.122,128.269 144.276 C 123.388 141.046,116.279 139.552,110.621 140.566 L 109.533 140.761 109.533 127.037 L 109.533 113.312 110.109 113.487 C 114.683 114.873,123.292 113.220,127.959 110.059 C 129.538 108.990,129.198 108.463,133.253 118.251 M281.722 110.335 C 286.299 113.226,293.152 114.536,298.592 113.561 L 299.680 113.366 299.680 127.065 L 299.680 140.765 298.976 140.611 C 298.589 140.526,298.111 140.405,297.913 140.343 C 294.224 139.175,285.381 141.168,281.039 144.144 C 280.428 144.563,279.839 144.807,279.729 144.686 C 279.359 144.276,272.450 127.371,272.485 126.960 C 272.504 126.735,273.978 123.039,275.761 118.746 C 277.544 114.453,279.158 110.566,279.348 110.109 C 279.778 109.071,279.710 109.064,281.722 110.335 M236.276 142.674 C 247.079 147.154,255.918 150.941,255.918 151.088 C 255.918 151.539,248.224 170.037,247.902 170.359 C 247.359 170.904,229.286 178.206,229.075 177.966 C 228.851 177.712,210.380 133.063,210.176 132.283 C 210.069 131.874,210.553 132.009,213.342 133.164 C 215.153 133.915,225.473 138.194,236.276 142.674 M190.347 155.426 C 185.111 168.048,180.693 178.375,180.532 178.375 C 180.066 178.375,161.647 170.692,161.310 170.358 C 160.532 169.584,153.446 151.673,153.823 151.435 C 154.303 151.132,199.723 132.355,199.806 132.425 C 199.841 132.454,195.584 142.804,190.347 155.426 M214.331 156.558 C 219.373 168.768,223.645 179.111,223.824 179.541 L 224.150 180.324 214.395 184.366 L 204.639 188.407 202.959 187.719 C 188.883 181.954,185.778 180.583,185.918 180.192 C 186.622 178.235,204.898 134.371,205.012 134.365 C 205.095 134.360,209.288 144.347,214.331 156.558 M142.925 141.624 C 144.431 145.269,145.715 148.389,145.780 148.558 C 145.887 148.837,136.232 153.006,136.065 152.752 C 133.660 149.082,133.563 150.396,136.816 142.560 C 138.309 138.963,139.637 135.745,139.766 135.409 C 140.075 134.606,139.818 134.099,142.925 141.624 M272.264 142.163 C 275.527 150.068,275.353 149.322,274.300 150.915 C 273.853 151.591,273.468 152.174,273.443 152.211 C 273.279 152.461,263.735 148.181,263.798 147.886 C 264.010 146.895,269.105 134.905,269.247 135.065 C 269.338 135.168,270.695 138.362,272.264 142.163 M266.572 155.259 C 270.840 157.028,271.296 157.275,271.167 157.754 C 271.089 158.046,270.896 158.930,270.739 159.718 L 270.454 161.152 263.250 164.134 C 259.288 165.775,255.974 167.116,255.887 167.116 C 255.650 167.114,261.386 153.306,261.627 153.300 C 261.741 153.297,263.966 154.179,266.572 155.259 M150.819 160.653 C 152.288 164.207,153.418 167.115,153.329 167.116 C 153.240 167.117,149.933 165.774,145.980 164.131 L 138.793 161.144 138.477 159.617 C 138.304 158.777,138.256 157.996,138.371 157.882 C 138.773 157.483,147.794 153.856,147.970 154.022 C 148.067 154.115,149.349 157.099,150.819 160.653 M147.923 171.286 L 156.732 174.947 160.387 183.762 C 162.397 188.611,164.042 192.652,164.043 192.743 C 164.043 192.833,163.234 193.090,162.244 193.313 C 156.699 194.565,150.973 198.296,148.023 202.580 L 147.051 203.991 137.383 194.325 C 132.065 189.009,127.798 184.592,127.901 184.510 C 128.003 184.429,128.733 183.877,129.523 183.284 C 133.875 180.017,137.114 174.929,138.364 169.393 C 138.851 167.235,137.554 166.978,147.923 171.286 M270.643 168.330 C 271.426 172.063,272.391 174.536,274.106 177.206 C 275.628 179.576,278.190 182.316,280.138 183.657 C 280.892 184.177,281.510 184.612,281.510 184.625 C 281.510 184.637,277.157 189.000,271.836 194.319 L 262.162 203.991 261.172 202.554 C 258.224 198.274,252.518 194.502,247.153 193.288 C 246.062 193.041,245.170 192.775,245.170 192.697 C 245.170 192.619,246.818 188.592,248.833 183.747 L 252.497 174.939 261.181 171.311 C 270.975 167.219,270.445 167.386,270.643 168.330 M174.212 182.169 C 176.497 183.108,178.368 183.963,178.371 184.067 C 178.387 184.790,174.381 193.725,174.090 193.614 C 173.904 193.542,173.022 193.349,172.130 193.185 L 170.508 192.886 167.531 185.694 C 165.893 181.739,164.554 178.424,164.554 178.327 C 164.555 178.230,165.793 178.670,167.306 179.306 C 168.820 179.941,171.927 181.229,174.212 182.169 M241.727 185.623 L 238.721 192.881 237.155 193.173 C 236.293 193.333,235.507 193.380,235.407 193.277 C 235.215 193.078,231.700 184.634,231.560 184.035 C 231.484 183.709,244.352 178.041,244.631 178.278 C 244.687 178.326,243.380 181.631,241.727 185.623 M228.372 190.538 C 230.688 196.156,230.653 195.417,228.667 196.699 L 227.041 197.749 219.876 194.780 C 215.935 193.147,212.648 191.749,212.573 191.673 C 212.458 191.558,225.784 185.850,226.261 185.810 C 226.347 185.802,227.297 187.930,228.372 190.538 M190.462 188.893 C 193.943 190.349,196.707 191.614,196.604 191.704 C 196.326 191.950,182.526 197.569,182.201 197.569 C 181.985 197.569,180.760 196.824,179.457 195.901 C 179.147 195.681,183.491 185.996,183.839 186.133 C 184.001 186.196,186.981 187.438,190.462 188.893 M213.636 198.498 C 221.769 201.873,222.630 202.286,222.309 202.658 C 218.965 206.539,216.530 217.731,218.168 221.689 C 218.343 222.112,217.598 222.137,204.604 222.137 L 190.855 222.137 191.032 221.561 C 192.360 217.243,190.895 208.991,187.953 204.220 C 187.007 202.686,186.845 202.263,187.132 202.082 C 187.448 201.882,204.157 194.847,204.479 194.778 C 204.549 194.763,208.670 196.437,213.636 198.498 " stroke="none" fill="#fbfbfb" fill-rule="evenodd"></path><path id="path1" d="M196.417 0.171 C 185.912 1.038,178.502 2.320,170.184 4.712 C 103.401 23.916,64.347 91.683,81.387 158.797 C 101.225 236.934,188.013 277.332,260.397 242.122 C 335.425 205.626,355.869 109.272,302.215 45.027 C 276.790 14.583,235.240 -3.034,196.417 0.171 M173.257 13.839 C 179.205 15.321,184.858 19.432,187.920 24.504 L 188.731 25.848 204.602 25.841 L 220.473 25.835 221.618 24.033 C 226.524 16.310,236.641 11.835,245.587 13.431 C 259.280 15.873,268.291 28.896,265.424 42.099 L 264.924 44.402 276.054 55.557 L 287.184 66.712 289.529 66.217 C 301.934 63.600,314.602 71.486,317.717 83.765 C 320.311 93.991,316.093 104.802,307.420 110.155 L 305.822 111.141 305.822 127.059 L 305.822 142.976 306.492 143.281 C 311.907 145.748,317.167 153.586,318.272 160.835 C 320.797 177.397,304.545 192.177,288.676 187.752 L 287.268 187.360 276.117 198.496 L 264.966 209.632 265.457 211.854 C 267.908 222.946,261.529 234.862,250.825 239.185 C 239.943 243.580,227.263 239.508,221.334 229.715 L 220.473 228.293 204.607 228.293 L 188.740 228.293 187.883 229.708 C 177.823 246.327,152.462 243.973,144.915 225.720 C 143.277 221.757,142.799 214.818,143.899 210.972 L 144.275 209.660 133.110 198.501 L 121.945 187.343 120.409 187.784 C 114.422 189.505,105.304 187.489,100.003 183.273 C 86.795 172.768,87.803 152.358,101.954 143.791 L 103.376 142.930 103.377 127.063 L 103.378 111.196 101.548 110.045 C 90.494 103.088,87.374 87.315,94.866 76.262 C 100.329 68.202,110.929 63.983,120.067 66.231 L 122.028 66.714 133.169 55.558 L 144.310 44.402 143.889 42.994 C 143.139 40.488,143.295 33.465,144.163 30.634 C 148.027 18.046,160.723 10.717,173.257 13.839 M191.350 33.589 C 192.119 39.597,190.848 45.417,187.650 50.533 L 186.857 51.801 195.706 55.472 C 200.748 57.563,204.731 59.077,204.965 58.990 C 205.190 58.906,209.195 57.267,213.864 55.347 L 222.353 51.858 221.639 50.817 C 218.283 45.923,216.855 38.954,217.952 32.821 L 218.100 31.990 204.623 31.990 L 191.145 31.990 191.350 33.589 M137.500 59.946 L 127.974 69.482 130.007 71.073 C 134.178 74.339,137.422 79.639,138.535 85.005 L 138.836 86.452 147.409 82.907 C 152.124 80.957,156.139 79.267,156.331 79.151 C 156.522 79.035,158.323 74.969,160.333 70.116 L 163.987 61.292 162.865 61.122 C 157.326 60.280,151.381 56.398,147.537 51.114 L 147.025 50.411 137.500 59.946 M260.596 52.464 C 257.279 56.702,251.523 60.161,246.199 61.118 L 245.226 61.292 248.855 70.055 C 250.850 74.874,252.594 78.918,252.729 79.040 C 253.048 79.330,269.775 86.248,270.151 86.246 C 270.308 86.245,270.505 85.737,270.590 85.118 C 271.240 80.378,275.136 74.073,279.389 70.877 C 280.204 70.265,280.954 69.698,281.056 69.616 C 281.159 69.535,276.955 65.184,271.715 59.949 L 262.188 50.431 260.596 52.464 M180.617 57.540 C 179.809 58.055,179.146 58.605,179.145 58.762 C 179.143 59.012,182.679 67.795,182.881 68.042 C 182.925 68.095,186.007 66.886,189.731 65.355 C 195.706 62.899,196.436 62.538,195.947 62.280 C 195.264 61.920,182.278 56.549,182.166 56.580 C 182.122 56.593,181.425 57.024,180.617 57.540 M219.882 59.482 C 216.037 61.081,212.852 62.431,212.804 62.481 C 212.693 62.596,224.901 67.622,225.386 67.661 C 225.688 67.686,229.559 59.053,229.559 58.356 C 229.559 58.208,227.096 56.537,226.918 56.565 C 226.893 56.569,223.726 57.882,219.882 59.482 M171.989 61.019 L 170.594 61.315 167.608 68.523 L 164.622 75.731 165.420 75.403 C 174.911 71.505,177.257 70.523,177.428 70.375 C 177.645 70.187,173.810 60.628,173.542 60.688 C 173.455 60.707,172.757 60.856,171.989 61.019 M234.225 61.996 C 233.937 62.735,233.071 64.855,232.301 66.707 L 230.899 70.074 236.947 72.574 C 240.273 73.948,243.360 75.224,243.807 75.408 L 244.620 75.743 243.580 73.252 C 243.007 71.882,241.660 68.639,240.585 66.046 L 238.631 61.330 237.102 61.008 C 234.783 60.519,234.803 60.512,234.225 61.996 M194.939 69.789 C 189.621 71.990,185.303 73.884,185.342 73.998 C 186.104 76.221,204.143 119.429,204.258 119.305 C 204.347 119.209,208.361 109.629,213.176 98.017 C 217.991 86.404,222.250 76.151,222.639 75.230 L 223.347 73.558 214.130 69.728 C 209.060 67.622,204.844 65.874,204.760 65.843 C 204.675 65.812,200.256 67.587,194.939 69.789 M228.375 76.127 C 228.293 76.340,224.048 86.563,218.942 98.846 C 213.836 111.128,209.700 121.223,209.751 121.279 C 209.819 121.354,255.186 102.764,255.600 102.493 C 255.636 102.469,253.919 98.239,251.785 93.093 L 247.905 83.736 239.052 80.081 C 234.182 78.071,229.821 76.272,229.361 76.083 C 228.637 75.786,228.503 75.792,228.375 76.127 M170.547 79.890 L 161.311 83.734 157.321 93.370 C 154.089 101.179,153.402 103.046,153.702 103.214 C 154.334 103.568,198.926 122.082,198.977 122.012 C 199.066 121.889,180.045 76.007,179.913 76.027 C 179.841 76.037,175.626 77.775,170.547 79.890 M145.763 90.168 L 138.871 93.026 138.497 94.933 C 138.289 95.990,138.224 96.879,138.351 96.926 C 138.477 96.973,140.595 97.855,143.058 98.886 C 146.346 100.262,147.587 100.676,147.724 100.443 C 147.827 100.268,149.075 97.321,150.497 93.893 C 151.919 90.465,153.137 87.572,153.204 87.464 C 153.473 87.028,152.364 87.431,145.763 90.168 M258.399 93.090 C 259.733 96.292,260.931 99.183,261.062 99.514 C 261.231 99.942,261.428 100.068,261.744 99.951 C 261.988 99.860,264.158 98.976,266.567 97.985 L 270.945 96.184 270.626 94.655 C 270.451 93.815,270.261 93.081,270.205 93.024 C 270.057 92.876,256.367 87.268,256.153 87.268 C 256.054 87.268,257.065 89.888,258.399 93.090 M268.458 103.272 C 265.995 104.313,263.869 105.205,263.735 105.255 C 263.600 105.305,264.751 108.407,266.294 112.148 C 267.988 116.259,269.173 118.820,269.287 118.620 C 269.391 118.438,270.749 115.220,272.304 111.469 L 275.132 104.650 274.062 102.997 C 273.474 102.087,272.981 101.352,272.965 101.362 C 272.949 101.373,270.921 102.232,268.458 103.272 M134.933 103.392 L 134.101 104.664 137.083 111.854 L 140.065 119.043 142.737 112.598 C 144.207 109.053,145.313 106.064,145.194 105.957 C 144.921 105.712,136.287 102.110,135.987 102.116 C 135.865 102.118,135.390 102.693,134.933 103.392 M234.886 117.165 C 222.404 122.328,212.269 126.628,212.365 126.720 C 212.589 126.937,257.644 145.617,257.943 145.617 C 258.066 145.617,258.223 145.473,258.292 145.298 C 258.361 145.122,260.062 141.012,262.073 136.166 C 264.083 131.320,265.728 127.226,265.728 127.068 C 265.728 126.660,257.874 107.738,257.714 107.760 C 257.641 107.771,247.369 112.003,234.886 117.165 M147.275 117.646 C 145.191 122.672,143.485 126.904,143.485 127.051 C 143.485 127.564,151.377 146.385,151.565 146.321 C 153.663 145.615,196.971 127.525,196.848 127.406 C 196.627 127.193,151.577 108.509,151.283 108.509 C 151.164 108.509,149.360 112.621,147.275 117.646 M128.204 110.069 C 123.246 113.424,116.613 114.794,110.493 113.728 L 109.533 113.561 109.533 127.037 L 109.533 140.513 111.260 140.314 C 117.551 139.589,123.541 140.972,128.609 144.318 L 129.388 144.832 133.024 136.060 C 135.024 131.236,136.660 127.188,136.660 127.066 C 136.660 126.875,129.534 109.501,129.394 109.351 C 129.367 109.321,128.831 109.644,128.204 110.069 M276.169 118.132 C 274.046 123.269,272.577 127.156,272.665 127.404 C 272.748 127.639,274.391 131.644,276.316 136.303 L 279.817 144.776 281.540 143.661 C 286.074 140.728,292.925 139.377,298.464 140.323 L 299.680 140.530 299.680 127.046 L 299.680 113.561 298.720 113.730 C 292.457 114.834,286.167 113.449,280.475 109.715 L 279.824 109.287 276.169 118.132 M210.197 132.246 C 210.303 132.418,228.618 176.622,229.011 177.654 C 229.152 178.025,230.487 177.545,238.544 174.231 L 247.914 170.377 251.894 160.748 C 254.083 155.453,255.797 151.045,255.704 150.954 C 255.247 150.508,209.984 131.900,210.197 132.246 M176.711 142.053 C 164.184 147.238,153.851 151.514,153.748 151.556 C 153.646 151.597,155.304 155.849,157.433 161.005 L 161.304 170.378 170.671 174.243 C 175.823 176.368,180.190 178.139,180.376 178.177 C 180.662 178.236,199.780 132.876,199.551 132.680 C 199.516 132.651,189.239 136.868,176.711 142.053 M204.915 134.788 C 204.637 135.247,186.052 180.136,186.052 180.349 C 186.052 180.570,204.083 188.175,204.607 188.175 C 204.820 188.175,223.640 180.469,223.879 180.283 C 223.949 180.229,205.287 134.859,205.113 134.660 C 205.074 134.615,204.985 134.673,204.915 134.788 M137.084 142.259 L 134.104 149.436 135.062 150.970 C 135.589 151.814,136.136 152.509,136.276 152.516 C 136.681 152.535,145.617 148.853,145.617 148.667 C 145.617 148.575,144.368 145.480,142.841 141.791 L 140.065 135.082 137.084 142.259 M266.456 141.576 C 265.003 145.101,263.909 148.070,264.025 148.174 C 264.341 148.458,273.318 152.106,273.412 151.989 C 273.457 151.933,273.861 151.344,274.310 150.679 L 275.127 149.470 272.403 142.873 C 270.904 139.245,269.548 136.027,269.388 135.721 C 269.132 135.232,268.788 135.918,266.456 141.576 M258.796 160.035 C 257.259 163.718,256.038 166.776,256.082 166.831 C 256.147 166.913,269.931 161.308,270.203 161.089 C 270.325 160.990,270.998 158.090,271.008 157.617 C 271.014 157.353,270.534 157.016,269.674 156.681 C 268.935 156.393,266.814 155.523,264.961 154.748 L 261.591 153.339 258.796 160.035 M142.913 156.012 L 138.289 157.933 138.607 159.476 C 138.782 160.325,138.962 161.048,139.008 161.083 C 139.302 161.307,153.072 166.908,153.136 166.829 C 153.277 166.656,148.010 154.220,147.769 154.154 C 147.641 154.120,145.456 154.955,142.913 156.012 M261.618 171.304 C 256.804 173.297,252.763 175.041,252.639 175.180 C 252.123 175.753,245.370 192.495,245.581 192.676 C 245.706 192.784,246.687 193.072,247.759 193.315 C 252.675 194.431,258.173 198.168,261.284 202.506 L 262.163 203.733 271.716 194.189 C 281.093 184.820,281.258 184.638,280.692 184.261 C 275.893 181.066,271.859 175.041,270.709 169.350 L 270.372 167.681 261.618 171.304 M138.586 169.082 C 137.883 173.771,134.197 179.773,130.007 183.053 L 127.974 184.645 137.500 194.185 C 146.850 203.550,147.032 203.715,147.409 203.149 C 150.581 198.384,156.672 194.300,162.289 193.170 L 163.988 192.828 160.365 184.075 C 158.373 179.261,156.629 175.218,156.490 175.091 C 156.166 174.794,139.443 167.877,139.057 167.880 C 138.897 167.881,138.685 168.422,138.586 169.082 M164.875 178.827 C 164.997 179.272,170.457 192.506,170.583 192.661 C 170.685 192.787,174.325 193.518,174.395 193.426 C 174.429 193.382,174.812 192.482,175.246 191.427 C 175.680 190.371,176.551 188.279,177.180 186.778 L 178.325 184.048 174.319 182.381 C 172.116 181.464,169.063 180.189,167.534 179.548 C 165.294 178.609,164.777 178.469,164.875 178.827 M238.004 181.084 C 234.131 182.707,231.744 183.841,231.760 184.050 C 231.775 184.236,232.623 186.415,233.644 188.891 L 235.501 193.392 237.071 193.030 C 237.934 192.831,238.656 192.647,238.676 192.623 C 238.876 192.379,244.394 178.745,244.342 178.622 C 244.305 178.531,241.452 179.639,238.004 181.084 M219.247 188.840 L 212.645 191.610 213.872 192.135 C 214.547 192.423,217.770 193.764,221.035 195.113 L 226.970 197.567 228.616 196.518 L 230.263 195.468 228.863 192.104 C 228.093 190.253,227.227 188.135,226.939 187.396 C 226.287 185.719,227.005 185.585,219.247 188.840 M183.097 187.268 C 179.086 196.807,179.342 195.695,180.919 196.726 L 182.174 197.547 188.965 194.762 C 192.699 193.230,195.924 191.882,196.131 191.766 C 196.451 191.586,184.398 186.297,183.689 186.306 C 183.585 186.307,183.319 186.740,183.097 187.268 M195.502 198.652 L 186.909 202.242 188.136 204.283 C 190.982 209.018,192.175 215.044,191.354 220.537 L 191.153 221.881 204.628 221.881 L 218.102 221.881 217.943 221.305 C 216.713 216.859,218.159 209.085,221.104 204.316 C 221.787 203.209,222.328 202.285,222.306 202.263 C 222.067 202.027,204.787 195.016,204.493 195.036 C 204.274 195.051,200.228 196.678,195.502 198.652 M299.926 217.257 C 276.863 240.713,246.116 255.258,212.156 258.775 C 207.832 259.222,190.990 259.231,187.204 258.787 C 167.200 256.443,152.963 252.183,134.898 243.137 C 130.207 240.788,130.062 240.768,131.447 242.659 C 137.205 250.522,144.307 254.713,162.353 260.896 C 176.763 265.833,178.196 266.864,176.843 271.319 C 175.389 276.105,173.763 278.288,165.721 286.244 C 152.537 299.289,151.407 302.854,154.608 321.325 C 156.186 330.431,156.170 334.120,154.519 342.290 C 152.571 351.931,152.350 356.490,153.441 364.555 C 154.096 369.396,153.572 373.375,152.233 373.725 C 151.650 373.877,147.310 373.581,143.309 373.115 C 137.724 372.466,133.226 373.125,127.437 375.440 C 117.619 379.367,114.638 379.457,108.765 376.002 C 100.053 370.877,98.078 371.165,90.291 378.695 C 85.219 383.600,83.068 385.251,78.501 387.745 C 70.799 391.951,69.866 392.695,69.866 394.631 C 69.866 398.275,72.551 399.611,77.328 398.341 C 94.918 393.668,118.483 392.980,147.665 396.288 C 167.158 398.498,167.954 398.318,173.058 390.545 C 181.611 377.518,186.138 362.919,187.466 344.082 C 188.488 329.586,189.811 328.346,200.640 331.737 C 207.961 334.030,211.365 334.203,222.265 332.838 C 225.080 332.486,228.650 332.123,230.198 332.032 L 233.013 331.868 233.726 332.984 C 234.721 334.544,235.145 336.141,235.585 339.987 C 236.274 346.003,236.467 346.613,238.805 350.155 C 245.628 360.493,247.222 370.308,244.115 382.853 C 243.014 387.295,242.851 392.774,243.782 394.021 C 245.139 395.839,247.642 396.245,253.743 395.637 C 257.819 395.231,264.294 395.336,269.842 395.900 C 288.492 397.794,298.509 394.512,295.345 387.544 C 294.506 385.696,293.514 385.388,286.871 384.915 C 278.924 384.349,274.443 382.015,267.383 374.762 C 262.155 369.390,261.120 366.699,260.153 355.951 C 258.674 339.522,258.298 328.582,258.988 322.073 C 259.858 313.876,259.451 311.538,256.618 308.466 C 253.381 304.954,243.120 302.087,227.895 300.442 C 218.116 299.385,218.816 299.619,221.253 298.224 C 222.373 297.583,225.419 295.763,228.023 294.179 C 238.592 287.750,243.383 285.595,249.904 284.337 C 254.733 283.405,255.436 283.654,258.412 287.354 C 262.096 291.934,262.353 291.981,268.045 289.093 L 272.266 286.952 274.009 287.931 C 276.240 289.184,276.134 289.208,277.015 287.237 C 277.428 286.312,278.303 284.847,278.959 283.981 C 280.904 281.412,282.391 280.144,288.615 275.748 C 288.934 275.522,289.528 274.679,289.935 273.873 C 294.621 264.590,290.942 251.770,281.919 245.934 L 280.283 244.877 281.984 243.309 C 294.742 231.553,301.209 223.905,305.330 215.698 L 306.571 213.226 306.005 212.865 C 305.693 212.666,305.318 212.433,305.172 212.348 C 305.025 212.262,302.665 214.471,299.926 217.257 " stroke="none" fill="#04044c" fill-rule="evenodd"></path><path id="path2" d="M242.930 13.228 C 243.177 13.293,243.580 13.293,243.826 13.228 C 244.072 13.164,243.871 13.111,243.378 13.111 C 242.885 13.111,242.684 13.164,242.930 13.228 M184.261 20.090 C 184.739 20.582,185.187 20.985,185.257 20.985 C 185.328 20.985,184.994 20.582,184.517 20.090 C 184.039 19.597,183.591 19.194,183.521 19.194 C 183.450 19.194,183.784 19.597,184.261 20.090 M196.755 26.040 C 201.164 26.079,208.304 26.079,212.622 26.040 C 216.940 26.000,213.333 25.968,204.607 25.968 C 195.880 25.968,192.347 26.000,196.755 26.040 M137.299 59.949 L 127.831 69.482 137.364 60.014 C 146.224 51.215,147.012 50.416,146.832 50.416 C 146.796 50.416,142.506 54.706,137.299 59.949 M271.657 59.885 C 276.864 65.093,281.181 69.354,281.251 69.354 C 281.322 69.354,277.119 65.093,271.913 59.885 C 266.706 54.677,262.389 50.416,262.319 50.416 C 262.248 50.416,266.451 54.677,271.657 59.885 M131.787 72.745 C 132.415 73.413,132.962 73.960,133.003 73.960 C 133.195 73.960,132.992 73.731,131.862 72.670 L 130.646 71.529 131.787 72.745 M90.668 89.187 C 90.670 89.891,90.720 90.149,90.779 89.760 C 90.837 89.371,90.836 88.795,90.775 88.480 C 90.714 88.165,90.666 88.484,90.668 89.187 M97.249 106.542 C 97.249 106.586,97.623 106.960,98.081 107.374 L 98.912 108.125 98.161 107.294 C 97.460 106.518,97.249 106.344,97.249 106.542 M103.511 127.063 C 103.511 135.790,103.543 139.397,103.583 135.079 C 103.622 130.761,103.622 123.621,103.583 119.212 C 103.543 114.804,103.511 118.337,103.511 127.063 M305.687 127.063 C 305.687 135.790,305.719 139.397,305.758 135.079 C 305.797 130.761,305.797 123.621,305.758 119.212 C 305.719 114.804,305.687 118.337,305.687 127.063 M311.068 146.897 C 311.618 147.460,312.126 147.921,312.196 147.921 C 312.266 147.921,311.874 147.460,311.324 146.897 C 310.775 146.334,310.267 145.873,310.197 145.873 C 310.126 145.873,310.519 146.334,311.068 146.897 M318.446 164.171 C 318.447 165.157,318.493 165.528,318.549 164.997 C 318.604 164.467,318.603 163.660,318.547 163.206 C 318.490 162.752,318.445 163.186,318.446 164.171 M131.798 181.318 C 131.176 181.951,130.725 182.470,130.796 182.470 C 130.866 182.470,131.432 181.951,132.054 181.318 C 132.675 180.685,133.126 180.166,133.056 180.166 C 132.986 180.166,132.419 180.685,131.798 181.318 M137.300 194.242 C 142.507 199.450,146.824 203.711,146.894 203.711 C 146.965 203.711,142.762 199.450,137.556 194.242 C 132.349 189.034,128.032 184.773,127.962 184.773 C 127.891 184.773,132.094 189.034,137.300 194.242 M271.656 194.306 L 262.188 203.839 271.721 194.371 C 280.581 185.572,281.369 184.773,281.189 184.773 C 281.153 184.773,276.863 189.063,271.656 194.306 M197.907 222.073 C 201.682 222.113,207.785 222.113,211.470 222.073 C 215.155 222.033,212.067 222.000,204.607 222.000 C 197.147 222.000,194.132 222.033,197.907 222.073 M196.755 228.215 C 201.164 228.254,208.304 228.254,212.622 228.215 C 216.940 228.175,213.333 228.143,204.607 228.143 C 195.880 228.143,192.347 228.176,196.755 228.215 M184.377 233.973 L 183.365 235.061 184.453 234.049 C 185.464 233.108,185.658 232.885,185.465 232.885 C 185.423 232.885,184.933 233.375,184.377 233.973 " stroke="none" fill="#575286" fill-rule="evenodd"></path><path id="path3" d="M149.968 54.079 C 149.968 54.123,150.342 54.497,150.800 54.911 L 151.631 55.662 150.880 54.830 C 150.179 54.055,149.968 53.881,149.968 54.079 M318.421 89.827 C 318.421 90.320,318.474 90.521,318.539 90.275 C 318.603 90.029,318.603 89.626,318.539 89.379 C 318.474 89.133,318.421 89.335,318.421 89.827 " stroke="none" fill="#7c7ca4" fill-rule="evenodd"></path><path id="path4" d="M258.733 20.345 C 259.211 20.838,259.659 21.241,259.729 21.241 C 259.800 21.241,259.467 20.838,258.989 20.345 C 258.512 19.853,258.063 19.450,257.993 19.450 C 257.923 19.450,258.256 19.853,258.733 20.345 M217.607 37.364 C 217.607 38.138,217.655 38.455,217.714 38.068 C 217.772 37.681,217.772 37.047,217.714 36.660 C 217.655 36.273,217.607 36.590,217.607 37.364 M311.324 72.937 C 311.874 73.500,312.382 73.960,312.452 73.960 C 312.522 73.960,312.130 73.500,311.580 72.937 C 311.031 72.374,310.523 71.913,310.453 71.913 C 310.382 71.913,310.775 72.374,311.324 72.937 M113.948 114.060 C 114.194 114.124,114.597 114.124,114.843 114.060 C 115.090 113.996,114.888 113.943,114.395 113.943 C 113.903 113.943,113.701 113.996,113.948 114.060 M294.626 114.060 C 294.872 114.124,295.275 114.124,295.521 114.060 C 295.768 113.996,295.566 113.943,295.074 113.943 C 294.581 113.943,294.379 113.996,294.626 114.060 M292.709 140.168 C 293.028 140.229,293.488 140.227,293.733 140.163 C 293.978 140.099,293.717 140.049,293.154 140.052 C 292.591 140.055,292.391 140.107,292.709 140.168 M90.674 164.171 C 90.676 165.016,90.724 165.331,90.780 164.871 C 90.837 164.411,90.836 163.720,90.778 163.335 C 90.719 162.951,90.673 163.327,90.674 164.171 M311.183 181.382 L 310.301 182.342 311.260 181.460 C 312.154 180.639,312.338 180.422,312.142 180.422 C 312.100 180.422,311.668 180.854,311.183 181.382 M133.077 198.464 C 139.199 204.587,144.265 209.597,144.336 209.597 C 144.406 209.597,139.455 204.587,133.333 198.464 C 127.212 192.342,122.146 187.332,122.075 187.332 C 122.005 187.332,126.956 192.342,133.077 198.464 M275.879 198.528 L 264.747 209.725 275.944 198.594 C 282.102 192.471,287.140 187.433,287.140 187.397 C 287.140 187.217,286.225 188.122,275.879 198.528 M217.604 216.891 C 217.606 217.594,217.655 217.852,217.714 217.463 C 217.773 217.074,217.771 216.498,217.711 216.183 C 217.650 215.869,217.602 216.187,217.604 216.891 " stroke="none" fill="#847ca4" fill-rule="evenodd"></path></g></svg>


===== FILE: assets/style/executor.css =====
.container {
  display: flex;
  flex-direction: column;
  gap: 10px;
  padding: 10px 0;
  width: 100%;
}

.dropdown-container {
  box-sizing: border-box;
  display: flex;
  flex-flow: column nowrap;
  align-items: flex-start;
  justify-content: flex-start;
}

.dropdown-container label {
  display: block;
  color: var(--vscode-foreground);
  cursor: pointer;
  font-size: var(--vscode-font-size);
  line-height: normal;
  margin-bottom: 2px;
}

.width-constraint {
  max-width: 380px;
  min-width: 130px;
  width: 100%;
}

.block-width {
  width: 100%;
}

.disabled-text {
  color: var(--vscode-search-resultsInfoForeground);
}

vscode-button {
  box-sizing: border-box;
  padding: 1.5px;
}

.action-button-container {
  align-items: center;
  display: flex;
  gap: 10px;
  justify-content: flex-end;
}

.custom-gas-field {
  margin-top: 10px;
}

.button-codicon {
  align-items: center;
  display: flex;
  height: 20px;
  justify-self: center;
  padding: 0;
  width: 20px;
}



===== FILE: assets/style/transactionHistory.css =====
.container {
  display: flex;
  flex-direction: column;
  gap: 10px;
  padding: 10px 0;
  width: 100%;
}

.width-constraint {
  max-width: 380px;
  min-width: 130px;
  width: 100%;
}

.disabled-text {
  color: var(--vscode-search-resultsInfoForeground);
}



===== FILE: assets/style/virtualizationUnit.css =====
.container {
  display: flex;
  flex-direction: column;
  gap: 10px;
  padding: 10px 0;
  width: 100%;
}

.dropdown-container {
  box-sizing: border-box;
  display: flex;
  flex-flow: column nowrap;
  align-items: flex-start;
  justify-content: flex-start;
}

.dropdown-container label {
  display: block;
  color: var(--vscode-foreground);
  cursor: pointer;
  font-size: var(--vscode-font-size);
  line-height: normal;
  margin-bottom: 2px;
}

.width-constraint {
  max-width: 380px;
  min-width: 130px;
  width: 100%;
}

.block-width {
  width: 100%;
}

.disabled-text {
  color: var(--vscode-search-resultsInfoForeground);
}

vscode-button {
  box-sizing: border-box;
  padding: 1.5px;
}

.action-button-container {
  align-items: center;
  display: flex;
  gap: 10px;
  justify-content: flex-end;
}

.custom-gas-field {
  margin-top: 10px;
}



===== FILE: assets/style/wallet.css =====
.container {
  display: flex;
  flex-direction: column;
  gap: 10px;
  padding: 10px 0;
  width: 100%;
}

.dropdown-container {
  box-sizing: border-box;
  display: flex;
  flex-flow: column nowrap;
  align-items: flex-start;
  justify-content: flex-start;
}

.dropdown-container label {
  display: block;
  color: var(--vscode-foreground);
  cursor: pointer;
  font-size: var(--vscode-font-size);
  line-height: normal;
  margin-bottom: 2px;
}

.qrcode-container {
  aspect-ratio: 1 / 1;
  align-items: center;
  display: flex;
  justify-content: center;
  max-height: 380px;
  min-height: 130px;
  height: 100%;
  max-width: 380px;
  min-width: 130px;
  width: 100%;
}

.width-constraint {
  max-width: 380px;
  min-width: 130px;
  width: 100%;
}

.block-width {
  width: 100%;
}

.progress-ring-container {
  align-items: center;
  display: flex;
  justify-content: center;
  max-width: 380px;
  min-width: 130px;
  width: 100%;
  height: 100vh;
}

vscode-button {
  box-sizing: border-box;
  padding: 1.5px;
}



===== FILE: package.json =====
{
  "name": "chainsatlas-go",
  "displayName": "ChainsAtlas GO",
  "description": "Run web2 code on web3.",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.80.0"
  },
  "categories": [
    "Other"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "views": {
      "chainsatlas-go": [
        {
          "type": "webview",
          "id": "wallet",
          "name": "Wallet"
        },
        {
          "type": "webview",
          "id": "virtualizationUnit",
          "name": "Virtualization Unit"
        },
        {
          "type": "webview",
          "id": "executor",
          "name": "Executor"
        },
        {
          "type": "webview",
          "id": "transactionHistory",
          "name": "Transaction History"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "chainsatlas-go",
          "title": "ChainsAtlas GO",
          "icon": "assets/img/logo.svg"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "yarn run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "yarn run compile-tests && yarn run compile && yarn run lint",
    "lint": "eslint src --ext ts --fix",
    "format": "prettier --write src",
    "test": "node ./out/test/runTest.js",
    "prepare": "husky install"
  },
  "devDependencies": {
    "@babel/core": "^7.22.9",
    "@babel/preset-env": "^7.22.9",
    "@babel/preset-react": "^7.22.5",
    "@babel/preset-typescript": "^7.22.5",
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "20.2.5",
    "@types/react": "^18.2.16",
    "@types/react-dom": "^18.2.7",
    "@types/vscode": "^1.80.0",
    "@typescript-eslint/eslint-plugin": "^5.59.8",
    "@typescript-eslint/parser": "^5.59.8",
    "@vscode/test-electron": "^2.3.2",
    "babel-loader": "^9.1.3",
    "eslint": "^8.41.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-plugin-prettier": "^5.0.0",
    "eslint-plugin-react": "^7.33.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "glob": "^8.1.0",
    "mocha": "^10.2.0",
    "prettier": "^3.0.0",
    "prettier-plugin-organize-imports": "^3.2.3",
    "ts-loader": "^9.4.3",
    "typescript": "^5.1.3",
    "webpack": "^5.85.0",
    "webpack-cli": "^5.1.1",
    "webpack-node-externals": "^3.0.0"
  },
  "dependencies": {
    "@vscode/codicons": "^0.0.33",
    "@vscode/webview-ui-toolkit": "^1.2.2",
    "@wagmi/chains": "^1.6.0",
    "@walletconnect/sign-client": "^2.9.1",
    "@walletconnect/universal-provider": "^2.9.1",
    "husky": "^8.0.3",
    "lokijs": "^1.5.12",
    "qrcode.react": "^3.1.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "web3": "^4.0.3"
  }
}


===== FILE: src/constants/index.ts =====
import type { Chain } from "@wagmi/chains";
import {
  arbitrum,
  arbitrumGoerli,
  aurora,
  auroraTestnet,
  avalanche,
  avalancheFuji,
  celo,
  celoAlfajores,
  goerli,
  lineaTestnet,
  mainnet,
  optimism,
  optimismGoerli,
  polygon,
  polygonMumbai,
  sepolia,
} from "@wagmi/chains";
import {
  ContractTransactionStatus,
  SupportedLanguage,
  ViewType,
} from "../types";

const SUPPORTED_CHAINS: Chain[] = [
  arbitrum,
  arbitrumGoerli,
  aurora,
  auroraTestnet,
  avalanche,
  avalancheFuji,
  celo,
  celoAlfajores,
  goerli,
  lineaTestnet,
  mainnet,
  optimism,
  optimismGoerli,
  polygon,
  polygonMumbai,
  sepolia,
];

const SUPPORTED_LANGUAGES: SupportedLanguage[] = ["c"];

const TRANSACTION_STATUS_LABEL: Record<ContractTransactionStatus, string> = {
  error: "Error",
  sending: "Waiting Approval...",
  sent: "Waiting Confirmation...",
  confirmation: "...",
  receipt: "...",
  transactionHash: "...",
};

const VIEWS: ViewType[] = [
  "executor",
  "transactionHistory",
  "virtualizationUnit",
  "wallet",
];

const V_UNIT_ABI = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "bytecodeAddress",
        type: "address",
      },
    ],
    name: "ContractDeployed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
    ],
    name: "getRuntimeReturn",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "bytecode",
        type: "bytes",
      },
    ],
    name: "runBytecode",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const V_UNIT_BYTECODE =
  "608060405234801561001057600080fd5b50610523806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632fdf8a9f1461003b578063a32cc87c1461006b575b600080fd5b61005560048036038101906100509190610213565b61009b565b6040516100629190610303565b60405180910390f35b6100856004803603810190610080919061023c565b6100ad565b60405161009291906102e8565b60405180910390f35b60606100a68261016b565b9050919050565b6000808251602084016000f09050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561012b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012290610325565b60405180910390fd5b7f8ffcdc15a283d706d38281f500270d8b5a656918f555de0913d7455e3e6bc1bf8160405161015a91906102e8565b60405180910390a180915050919050565b6060813b6040519150601f19601f602083010116820160405280825280600060208401853c50919050565b60006101a96101a48461036a565b610345565b9050828152602081018484840111156101c157600080fd5b6101cc8482856103fa565b509392505050565b6000813590506101e3816104d6565b92915050565b600082601f8301126101fa57600080fd5b813561020a848260208601610196565b91505092915050565b60006020828403121561022557600080fd5b6000610233848285016101d4565b91505092915050565b60006020828403121561024e57600080fd5b600082013567ffffffffffffffff81111561026857600080fd5b610274848285016101e9565b91505092915050565b610286816103c8565b82525050565b60006102978261039b565b6102a181856103a6565b93506102b1818560208601610409565b6102ba8161049c565b840191505092915050565b60006102d26018836103b7565b91506102dd826104ad565b602082019050919050565b60006020820190506102fd600083018461027d565b92915050565b6000602082019050818103600083015261031d818461028c565b905092915050565b6000602082019050818103600083015261033e816102c5565b9050919050565b600061034f610360565b905061035b828261043c565b919050565b6000604051905090565b600067ffffffffffffffff8211156103855761038461046d565b5b61038e8261049c565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006103d3826103da565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561042757808201518184015260208101905061040c565b83811115610436576000848401525b50505050565b6104458261049c565b810181811067ffffffffffffffff821117156104645761046361046d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f436f6e7472616374206372656174696f6e206661696c65640000000000000000600082015250565b6104df816103c8565b81146104ea57600080fd5b5056fea2646970667358221220922ec0bb8d08ef926ec84ffcb7c0d7e4be47d4fa02c1a386ecdf703e8dd2136c64736f6c63430008040033";

const WALLETCONNECT_PROJECT_ID = "7b1ecd906a131e3a323a225589f75287";

export {
  SUPPORTED_CHAINS,
  SUPPORTED_LANGUAGES,
  TRANSACTION_STATUS_LABEL,
  VIEWS,
  V_UNIT_ABI,
  V_UNIT_BYTECODE,
  WALLETCONNECT_PROJECT_ID,
};



===== FILE: src/extension.ts =====
import { ExtensionContext, Uri, window } from "vscode";
import { VIEWS } from "./constants";
import ChainsAtlasGO from "./lib/ChainsAtlasGO";
import CustomViewProvider from "./lib/CustomViewProvider";
import { ViewType } from "./types";

/**
 * Initializes the ChainsAtlasGO instance.
 * @param context - The extension context.
 * @returns The initialized ChainsAtlasGO instance.
 */
const initializeChainsAtlasGO = async (
  context: ExtensionContext,
): Promise<ChainsAtlasGO> => {
  const chainsAtlasGO = new ChainsAtlasGO(context);
  await chainsAtlasGO.init();
  return chainsAtlasGO;
};

/**
 * Sets up the view providers for the extension.
 * @param extensionUri - The extension URI.
 * @returns An object containing the initialized view providers.
 */
const setupViewProviders = (
  extensionUri: Uri,
): Record<ViewType, CustomViewProvider> => {
  const viewProviders: Partial<Record<ViewType, CustomViewProvider>> = {};

  for (const view of VIEWS) {
    viewProviders[view] = new CustomViewProvider(extensionUri, view);
  }

  return viewProviders as Record<ViewType, CustomViewProvider>;
};

/**
 * Activates the extension.
 * @param context - The extension context.
 */
const activate = async (context: ExtensionContext): Promise<void> => {
  try {
    const chainsAtlasGO = await initializeChainsAtlasGO(context);
    const viewProviders = setupViewProviders(context.extensionUri);

    Object.values(viewProviders).forEach((vProvider) => {
      vProvider.register();
      vProvider.on("viewResolved", (view) => chainsAtlasGO.addView(view));
      context.subscriptions.push(vProvider);
    });

    context.subscriptions.push(chainsAtlasGO);
  } catch (e) {
    if (e instanceof Error) {
      window.showErrorMessage(`Extension activation failed: ${e.message}`);
    } else {
      window.showErrorMessage(
        `Unexpected error during activation: ${JSON.stringify(e)}`,
      );
    }
  }
};

export { activate };



===== FILE: src/lib/ChainsAtlasGO.ts =====
import UniversalProvider from "@walletconnect/universal-provider";
import { extname } from "path";
import { ExtensionContext, WebviewView, window, workspace } from "vscode";
import Web3, { FMT_BYTES, FMT_NUMBER } from "web3";
import {
  SUPPORTED_CHAINS,
  SUPPORTED_LANGUAGES,
  WALLETCONNECT_PROJECT_ID,
} from "../constants";
import {
  ExecutorData,
  ExecutorFile,
  SupportedLanguage,
  TransactionHistoryData,
  ViewMap,
  ViewType,
  VirtualizationUnitData,
  WalletData,
} from "../types";
import Executor from "./Executor";
import TransactionHistory from "./TransactionHistory";
import VirtualizationUnit from "./VirtualizationUnit";
import Wallet from "./Wallet";

class ChainsAtlasGO {
  private _executor?: Executor;
  private _transactionHistory?: TransactionHistory;
  private _gasResolver?: (value: string | PromiseLike<string>) => void;
  private _provider?: UniversalProvider;
  private _userFile?: ExecutorFile;
  private _viewMap: Partial<ViewMap> = {};
  private _virtualizationUnit?: VirtualizationUnit;
  private _wallet?: Wallet;
  private _web3?: Web3;

  constructor(private readonly _context: ExtensionContext) {}

  public addView = async (view: WebviewView): Promise<void> => {
    try {
      if (
        !this._provider ||
        !this._wallet ||
        !this._virtualizationUnit ||
        !this._executor ||
        !this._transactionHistory
      ) {
        throw new Error("Call init() before adding views.");
      }

      if (!this._isViewType(view.viewType)) {
        throw new Error("Invalid view type.");
      }

      this._viewMap[view.viewType] = view;

      switch (view.viewType) {
        case "executor":
          try {
            view.webview.onDidReceiveMessage(
              this._executorViewMsgHandler,
              undefined,
              this._context.subscriptions,
            );
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "transactionHistory":
          try {
            view.webview.onDidReceiveMessage(
              this._transactionHistoryViewMsgHandler,
              undefined,
              this._context.subscriptions,
            );
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "virtualizationUnit":
          try {
            view.webview.onDidReceiveMessage(
              this._vUnitViewMsgHandler,
              undefined,
              this._context.subscriptions,
            );
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "wallet":
          try {
            this._provider.on("display_uri", async (uri: string) => {
              if (!this._wallet) {
                throw new Error("Wallet not initialized.");
              }

              this._wallet.uri = uri;
              this._syncView(["wallet"]);
            });

            view.webview.onDidReceiveMessage(
              this._walletViewMsgHandler,
              undefined,
              this._context.subscriptions,
            );
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        default:
          break;
      }
    } catch (e) {
      if (e instanceof Error) {
        window.showErrorMessage(e.message);
      }

      window.showErrorMessage(JSON.stringify(e));
    }
  };

  // Called when the extension is deactivated
  public dispose = async (): Promise<void> => {
    try {
      await this._wallet?.disconnect();
      this._web3?.currentProvider?.disconnect();
      await this._provider?.disconnect();
    } catch (e) {
      if (e instanceof Error) {
        window.showErrorMessage(e.message);
      }

      window.showErrorMessage(JSON.stringify(e));
    }
  };

  public init = async (): Promise<void> => {
    try {
      this._provider = await UniversalProvider.init({
        projectId: WALLETCONNECT_PROJECT_ID,
        metadata: {
          name: "ChainsAtlas GO",
          description: "ChainsAtlas GO VS Code",
          url: "https://chainsatlas.com/",
          icons: [
            "https://chainsatlas.com/wp-content/uploads/2022/08/ChainsAtlas-logo.png",
          ],
        },
      });

      this._executor = new Executor();
      this._transactionHistory = new TransactionHistory();
      this._virtualizationUnit = new VirtualizationUnit();
      this._wallet = new Wallet(this._provider);
    } catch (e) {
      if (e instanceof Error) {
        window.showErrorMessage(e.message);
      }

      window.showErrorMessage(JSON.stringify(e));
    }
  };

  // ========================= Private =========================
  // -------------------- Messsage Handlers --------------------
  private _executorViewMsgHandler = async (message: {
    type: string;
    value?: string;
  }): Promise<void> => {
    try {
      if (!this._executor) {
        throw new Error("Executor not initialized");
      }

      if (!this._transactionHistory) {
        throw new Error("TransactionHistory not initialized.");
      }

      if (!this._virtualizationUnit) {
        throw new Error("VirtualizationUnit not initialized.");
      }

      if (!this._wallet) {
        throw new Error("Wallet not initialized");
      }

      switch (message.type) {
        case "cancelCompile":
          try {
            this._userFile = undefined;

            this._syncView(["executor"]);
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "cancelExecution":
          try {
            this._executor.cancelExecution();
            this._syncView(["executor"]);
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "clearFile":
          try {
            this._executor.currentFile = undefined;
            this._executor.nargs = undefined;

            this._syncView(["executor"]);
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "compile":
          try {
            if (!message.value) {
              throw new Error("Invalid number of arguments.");
            }

            if (!this._userFile) {
              throw new Error("Invalid file.");
            }

            const sync = () => this._syncView(["executor"]);

            this._executor.on("sync", sync);

            await this._executor.compileBytecode(
              this._userFile,
              Number(message.value),
            );

            this._executor.off("sync", sync);
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;

        case "estimate":
          try {
            if (!this._virtualizationUnit.currentContract) {
              throw new Error("Invalid virtualization unit.");
            }

            if (!this._wallet.currentAccount) {
              throw new Error("Invalid account.");
            }

            if (!this._web3) {
              throw new Error("Web3 not initialized.");
            }

            if (!message.value) {
              throw new Error("Invalid arguments.");
            }

            this._executor.once("gasEstimated", () =>
              this._getUserGas("executor"),
            );

            const manageSyncEvents = async (
              executor: Executor,
            ): Promise<void> => {
              const expectedEvents = 4;

              let eventsReceived = 0;

              const sync = () => {
                this._syncView(["executor"]);
                eventsReceived++;
                if (eventsReceived === expectedEvents) {
                  this.addTxHistoryEntry();
                  executor.off("sync", sync);
                }
              };

              executor.on("sync", sync);
            };

            manageSyncEvents(this._executor);

            await this._executor.runBytecode(
              JSON.parse(message.value),
              this._wallet?.currentAccount,
              this._virtualizationUnit?.currentContract,
              this._web3,
            );
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "execute":
          try {
            if (!message.value) {
              throw new Error("Invalid user gas.");
            }

            this._handleUserGas(message.value);
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "getActiveFile":
          try {
            await this._getActiveFile();

            this._syncView(["executor"]);
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "ready":
          try {
            this._syncView(["executor"]);
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "selectFile":
          try {
            await this._getUserFile();

            this._syncView(["executor"]);
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        default:
          break;
      }
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  private _transactionHistoryViewMsgHandler = async (message: {
    type: string;
    value?: string;
  }): Promise<void> => {
    try {
      switch (message.type) {
        case "ready":
          try {
            this._syncView(["transactionHistory"]);
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        default:
          break;
      }
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  private _vUnitViewMsgHandler = async (message: {
    type: string;
    value?: string;
  }): Promise<void> => {
    try {
      if (!this._virtualizationUnit) {
        throw new Error("VirtualizationUnit not initialized.");
      }

      if (!this._wallet) {
        throw new Error("Wallet not initialized.");
      }

      switch (message.type) {
        case "clearDeployment":
          try {
            this._virtualizationUnit.clearDeployment();
            this._syncView(["virtualizationUnit"]);
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "deploy":
          try {
            if (!this._wallet.currentAccount) {
              throw new Error("Invalid account.");
            }

            if (!this._web3) {
              throw new Error("Invalid web3 provider.");
            }

            this._virtualizationUnit.once("gasEstimated", () =>
              this._getUserGas("virtualizationUnit"),
            );

            const manageSyncEvents = async (
              virtualizationUnit: VirtualizationUnit,
            ): Promise<void> => {
              const expectedEvents = 4;

              let eventsReceived = 0;

              const sync = () => {
                this._syncView(["wallet", "virtualizationUnit", "executor"]);
                eventsReceived++;
                if (eventsReceived === expectedEvents) {
                  virtualizationUnit.off("sync", sync);
                }
              };

              virtualizationUnit.on("sync", sync);
            };

            manageSyncEvents(this._virtualizationUnit);

            await this._virtualizationUnit.deploy(
              this._wallet.currentAccount,
              this._web3,
            );
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "ready":
          try {
            this._syncView(["virtualizationUnit"]);
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "send":
          try {
            if (message.value) {
              this._handleUserGas(message.value);
            } else {
              throw new Error("Invalid user gas.");
            }
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "setContract":
          try {
            if (
              message.value &&
              this._virtualizationUnit.contracts?.includes(message.value)
            ) {
              this._virtualizationUnit.currentContract = message.value;

              this._syncView(["virtualizationUnit", "executor"]);
            } else {
              throw new Error("Invalid contract address.");
            }
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        default:
          break;
      }
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  private _walletViewMsgHandler = async (message: {
    type: string;
    value?: string;
  }): Promise<void> => {
    try {
      if (!this._provider) {
        throw new Error("UniversalProvider not initialized.");
      }

      if (!this._transactionHistory) {
        throw new Error("TransactionHistory not initialized.");
      }

      if (!this._virtualizationUnit) {
        throw new Error("VirtualizationUnit not initialized.");
      }

      if (!this._wallet) {
        throw new Error("Wallet not initialized.");
      }

      switch (message.type) {
        case "changeAccount":
          try {
            if (
              message.value &&
              this._wallet.accounts?.includes(message.value)
            ) {
              this._wallet.currentAccount = message.value;
              this._transactionHistory.currentAccount = message.value;
              this._transactionHistory.clear();

              this._syncView([
                "wallet",
                "virtualizationUnit",
                "executor",
                "transactionHistory",
              ]);
            } else {
              throw new Error("Invalid account.");
            }
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "connect":
          try {
            await this._wallet.connect(Number(message.value));

            this._web3 = new Web3(this._provider);

            this._virtualizationUnit.clearDeployment();
            this._virtualizationUnit.contracts = [];
            this._virtualizationUnit.currentContract = undefined;

            this._transactionHistory.clear();

            this._transactionHistory.currentAccount =
              this._wallet.currentAccount;

            this._syncView([
              "wallet",
              "virtualizationUnit",
              "executor",
              "transactionHistory",
            ]);
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "disconnect":
          try {
            await this._wallet.disconnect();

            this._virtualizationUnit.clearDeployment();
            this._virtualizationUnit.contracts = [];
            this._virtualizationUnit.currentContract = undefined;

            this._transactionHistory.clear();
            this._transactionHistory.currentAccount =
              this._wallet.currentAccount;

            this._syncView([
              "wallet",
              "virtualizationUnit",
              "executor",
              "transactionHistory",
            ]);
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        case "ready":
          try {
            this._syncView(["wallet"]);
          } catch (e) {
            if (e instanceof Error) {
              window.showErrorMessage(e.message);
            }

            window.showErrorMessage(JSON.stringify(e));
          }
          break;
        default:
          break;
      }
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  // ------------------ View State Generators ------------------
  private _generateExecutorData = (): ExecutorData => {
    try {
      if (!this._executor) {
        throw new Error("Executor not initialized.");
      }

      if (!this._virtualizationUnit) {
        throw new Error("VirtualizationUnit not initialized.");
      }

      if (!this._wallet) {
        throw new Error("Wallet not initialized.");
      }

      const {
        compiling,
        contractTransactionStatus,
        currentFile,
        estimating,
        gasEstimate,
        nargs,
      } = this._executor;
      const { currentContract } = this._virtualizationUnit;
      const { currentAccount } = this._wallet;

      return {
        compiling,
        contractTransactionStatus,
        currentFile,
        disabled: !Boolean(currentAccount && currentContract),
        estimating,
        gasEstimate,
        nargs,
        userFile: this._userFile,
      };
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  private _generateTxHistoryData = (): TransactionHistoryData => {
    try {
      if (!this._transactionHistory) {
        throw new Error("TransactionHistory not initialized.");
      }

      if (!this._wallet) {
        throw new Error("Wallet not initialized.");
      }

      const { rows } = this._transactionHistory;
      const { currentAccount } = this._wallet;

      return {
        disabled: !Boolean(currentAccount),
        rows,
      };
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  private _generateVUnitData = (): VirtualizationUnitData => {
    try {
      if (!this._virtualizationUnit) {
        throw new Error("VirtualizationUnit not initialized.");
      }

      if (!this._wallet) {
        throw new Error("Wallet not initialized.");
      }

      const {
        contracts,
        contractTransactionStatus,
        currentContract,
        estimating,
        gasEstimate,
      } = this._virtualizationUnit;
      const { currentAccount } = this._wallet;

      return {
        contracts,
        contractTransactionStatus,
        currentContract,
        disabled: !Boolean(currentAccount),
        estimating,
        gasEstimate,
      };
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  private _generateWalletData = async (): Promise<WalletData> => {
    try {
      if (!this._wallet) {
        throw new Error("Wallet not initialized.");
      }

      const { accounts, currentAccount, chain, isConnected, uri } =
        this._wallet;

      if (!chain) {
        throw new Error("Invalid chain.");
      }

      return {
        accounts,
        balance: await this._getBalance(currentAccount, chain?.id.toString()),
        chain,
        chains: SUPPORTED_CHAINS,
        currentAccount,
        isConnected,
        uri,
      };
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  // ------------------- User Input Handlers -------------------
  private _getActiveFile = async (): Promise<void> => {
    try {
      if (!this._executor) {
        throw new Error("Executor not initialized.");
      }

      const activeEditor = window.activeTextEditor;
      if (activeEditor) {
        const uri = activeEditor.document.uri;

        const extension = extname(uri.fsPath).slice(1);

        if (SUPPORTED_LANGUAGES.includes(extension as SupportedLanguage)) {
          this._userFile = {
            content: (await workspace.fs.readFile(uri)).toString(),
            extension: extension as SupportedLanguage,
            path: uri.fsPath,
          };
        }
      }
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  private _getUserFile = async (): Promise<void> => {
    try {
      if (!this._executor) {
        throw new Error("Executor not initialized.");
      }
      const uris = await window.showOpenDialog({
        canSelectMany: false,
        openLabel: "Open",
        filters: { "Supported files": SUPPORTED_LANGUAGES },
      });

      if (uris && uris.length > 0) {
        const selectedFileUri = uris[0];

        this._userFile = {
          content: (await workspace.fs.readFile(selectedFileUri)).toString(),
          extension: extname(selectedFileUri.fsPath).slice(
            1,
          ) as SupportedLanguage,
          path: selectedFileUri.fsPath,
        };
      } else {
        window.showWarningMessage("No file selected.");
      }
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  private _getUserGas = async (
    view: "executor" | "virtualizationUnit",
  ): Promise<void> => {
    try {
      if (view === "executor" && !this._executor) {
        throw new Error("Executor not initialized.");
      }

      if (view === "virtualizationUnit" && !this._virtualizationUnit) {
        throw new Error("VirtualizationUnit not initialized.");
      }

      // Sync gas estimate
      this._syncView([view]);

      const userGas = await new Promise(
        (resolve) => (this._gasResolver = resolve),
      );

      if (view === "executor") {
        this._executor?.emit("userGasReceived", userGas);
      } else {
        this._virtualizationUnit?.emit("userGasReceived", userGas);
      }
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  private _handleUserGas = (gas: string): void => {
    try {
      if (this._gasResolver) {
        this._gasResolver(gas);
        this._gasResolver = undefined;
      }
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  // -------------------------- Utils --------------------------
  private addTxHistoryEntry = async (): Promise<void> => {
    try {
      if (!this._executor) {
        throw new Error("Executor not initialized");
      }

      if (!this._transactionHistory) {
        throw new Error("TransactionHistory not initialized");
      }

      if (!this._wallet) {
        throw new Error("Wallet not initialized");
      }

      const { output, transactionHash } = this._executor;
      const { chain } = this._wallet;

      if (chain && output && transactionHash) {
        this._transactionHistory.addRow({
          output,
          transactionHash,
          transactionUrl: `${chain.blockExplorers?.default.url}/tx/${transactionHash}`,
        });

        this._executor.output = undefined;
        this._executor.transactionHash = undefined;

        await this._syncView(["wallet", "executor", "transactionHistory"]);
      }

      throw new Error("Invalid transaction data.");
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  private _getBalance = async (
    account?: string,
    chainId?: string,
  ): Promise<string | undefined> => {
    try {
      if (account && chainId && this._web3) {
        const web3ChainId = (await this._web3.eth.getChainId()).toString();

        return chainId === web3ChainId
          ? await this._web3.eth.getBalance(account, undefined, {
              number: FMT_NUMBER.STR,
              bytes: FMT_BYTES.HEX,
            })
          : undefined;
      }

      return undefined;
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  private _isViewType = (value: any): value is ViewType => {
    return (
      value === "executor" ||
      value === "transactionHistory" ||
      value === "virtualizationUnit" ||
      value === "wallet"
    );
  };

  private _syncView = async (viewTypes: ViewType[]): Promise<void> => {
    for (const type of viewTypes) {
      switch (type) {
        case "transactionHistory":
          this._viewMap.transactionHistory?.webview.postMessage(
            await this._generateTxHistoryData(),
          );
          break;
        case "executor":
          this._viewMap.executor?.webview.postMessage(
            await this._generateExecutorData(),
          );
          break;
        case "virtualizationUnit":
          this._viewMap.virtualizationUnit?.webview.postMessage(
            await this._generateVUnitData(),
          );
          break;
        case "wallet":
          this._viewMap.wallet?.webview.postMessage(
            await this._generateWalletData(),
          );
          break;
        default:
          break;
      }
    }
  };
}

export default ChainsAtlasGO;



===== FILE: src/lib/CustomViewProvider.ts =====
import { EventEmitter } from "events";
import {
  CancellationToken,
  Disposable,
  Uri,
  WebviewView,
  WebviewViewProvider,
  WebviewViewResolveContext,
  window,
} from "vscode";
import { ViewType } from "../types";

class CustomViewProvider extends EventEmitter implements WebviewViewProvider {
  private _disposable?: Disposable;
  private _view!: WebviewView;

  constructor(
    private readonly _extensionUri: Uri,
    private readonly _viewType: ViewType,
  ) {
    super();
  }

  public dispose = (): void => {
    this._disposable?.dispose();
  };

  public register = (): void => {
    this._disposable = window.registerWebviewViewProvider(this._viewType, this);
  };

  public resolveWebviewView = (
    webviewView: WebviewView,
    _context: WebviewViewResolveContext,
    _token: CancellationToken,
  ): void => {
    this._view = webviewView;

    this._view.webview.options = {
      enableScripts: true,
      localResourceRoots: [
        Uri.joinPath(this._extensionUri, "assets"),
        Uri.joinPath(this._extensionUri, "dist"),
        Uri.joinPath(this._extensionUri, "node_modules/@vscode/codicons/dist"),
      ],
    };

    this._view.webview.html = this._getHtmlForWebview(this._view);

    this.emit("viewResolved", this._view);
  };

  // -------------------- Private --------------------

  private _getHtmlForWebview = (view: WebviewView): string => {
    const styleUri = view.webview.asWebviewUri(
      Uri.joinPath(
        this._extensionUri,
        "assets",
        "style",
        `${this._viewType}.css`,
      ),
    );

    const codiconsUri = view.webview.asWebviewUri(
      Uri.joinPath(
        this._extensionUri,
        "node_modules",
        "@vscode/codicons",
        "dist",
        "codicon.css",
      ),
    );

    const scriptUri = view.webview.asWebviewUri(
      Uri.joinPath(this._extensionUri, "dist", `${this._viewType}.js`),
    );

    const nonce = this._getNonce();

    return `<!DOCTYPE html>
			<html lang="en">
			<head>
				<meta charset="UTF-8">

				<!--
					Use a content security policy to only allow loading styles from our extension directory,
					and only allow scripts that have a specific nonce.
					(See the 'webview-sample' extension sample for img-src content security policy examples)
				-->
        <meta http-equiv="Content-Security-Policy" content="default-src 'none'; font-src ${view.webview.cspSource}; img-src ${view.webview.cspSource}; script-src 'nonce-${nonce}'; style-src * 'unsafe-inline'">

				<meta name="viewport" content="width=device-width, initial-scale=1.0">

				<link href="${styleUri}" rel="stylesheet">
        <link href="${codiconsUri}" rel="stylesheet" />
        

				<title>ChainsAtlas GO</title>
			</head>
			<body>
				<div id="root" />
				<script nonce="${nonce}" src="${scriptUri}"></script>
			</body>
			</html>`;
  };

  private _getNonce = (): string => {
    let text = "";
    const possible =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for (let i = 0; i < 32; i++) {
      text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
  };
}

export default CustomViewProvider;



===== FILE: src/lib/Executor.ts =====
import EventEmitter from "events";
import Web3, { AbiFragment, AbiParameter, Bytes } from "web3";
import { V_UNIT_ABI } from "../constants";
import {
  BytecodeStructure,
  ContractTransactionStatus,
  ExecutorFile,
} from "../types";

import fetch from "cross-fetch";

class Executor extends EventEmitter {
  private static readonly _API_TOKEN = "rBzCg5dLhoBdXdC15vNa2";

  public compiling = false;
  public contractTransactionStatus?: ContractTransactionStatus;
  public currentFile?: ExecutorFile;
  public estimating = false;
  public gasEstimate?: string;
  public nargs?: number;
  public output?: Bytes;
  public transactionHash?: Bytes;

  private _bytecodeStruct?: BytecodeStructure;

  constructor() {
    super();
  }

  public cancelExecution = (): void => {
    this.contractTransactionStatus = undefined;
    this.gasEstimate = undefined;
  };

  public compileBytecode = async (
    file: ExecutorFile,
    nargs: number,
  ): Promise<void> => {
    try {
      this._bytecodeStruct = undefined;
      this.compiling = true;
      this.currentFile = undefined;
      this.nargs = undefined;

      this.emit("sync");

      const data = {
        entrypoint_nargs: nargs,
        language: file.extension,
        source_code: file.content,
      };

      const response = await fetch(
        "https://api.chainsatlas.com/build/generate",
        {
          method: "POST",
          body: JSON.stringify(data),
          headers: {
            "Content-Type": "application/json",
            "x-access-tokens": Executor._API_TOKEN,
          },
        },
      );
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      this._bytecodeStruct = (await response.json()).data;
      this.compiling = false;
      this.currentFile = file;
      this.nargs = nargs;

      this.emit("sync");
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  public runBytecode = async (
    args: any[],
    from: string,
    vUnitAddress: string,
    web3: Web3,
  ): Promise<void> => {
    try {
      if (!this._bytecodeStruct) {
        throw new Error("Invalid bytecode structure.");
      }

      this.estimating = true;

      this.emit("sync");

      const contractInstance = new web3.eth.Contract(V_UNIT_ABI, vUnitAddress);

      const inputBytecode = await this._composeInput(
        this._bytecodeStruct,
        args.map((arg) => Number(arg)),
      );

      const call = contractInstance.methods.runBytecode(inputBytecode);

      this.gasEstimate = (await call.estimateGas({ from })).toString();

      this.estimating = false;

      this.emit("gasEstimated");

      const gas = await this._getUserGas();

      const tx = {
        to: contractInstance.options.address,
        data: call.encodeABI(),
        gas,
        from,
      };

      await web3.eth
        .sendTransaction(tx)
        .on("sending", () => {
          this.contractTransactionStatus = "sending";
          this.emit("sync");
        })
        .on("sent", () => {
          this.contractTransactionStatus = "sent";
          this.emit("sync");
        })
        .on("confirmation", async ({ receipt }) => {
          this.cancelExecution();

          const { logs, transactionHash } = receipt;

          const eventAbi = contractInstance.options.jsonInterface.find(
            (jsonInterface) =>
              jsonInterface.type === "event" &&
              (
                jsonInterface as AbiFragment & {
                  name: string;
                  signature: string;
                }
              ).name === "ContractDeployed",
          );

          const decodedLogs = logs.map((log) => {
            if (eventAbi && eventAbi.inputs && log.topics) {
              const decodedLog = web3.eth.abi.decodeLog(
                eventAbi.inputs as AbiParameter[],
                log.data as string,
                log.topics.slice(1) as string | string[],
              );
              return decodedLog;
            }
          });

          const bytecodeAddress = decodedLogs[0]?.bytecodeAddress;

          const output = await contractInstance.methods
            .getRuntimeReturn(bytecodeAddress as string)
            .call();

          this.output = output;
          this.transactionHash = transactionHash;

          this.emit("sync");

          throw new Error("Invalid contract address.");
        })
        .on("error", (e) => {
          this.contractTransactionStatus = "error";
          this.emit("sync");

          throw e;
        });
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  // -------------------- Private --------------------

  private _composeInput = (
    bytecodeStruct: BytecodeStructure,
    inputData: any[],
  ): string => {
    try {
      const key = BigInt(bytecodeStruct.key);
      const nargs = bytecodeStruct.nargs;

      let bytecode = bytecodeStruct.bytecode;

      if (nargs !== inputData.length) {
        throw new Error(
          `The number of argument is a constant, to update it please generate a new bytecodeStruct through the API`,
        );
      }

      for (let i = 0; i < nargs; i++) {
        const lookup = (key + BigInt(i)).toString(16);
        const replacement = BigInt(inputData[i]).toString(16).padStart(32, "0");

        if (bytecode.includes(lookup)) {
          bytecode = bytecode.replace(lookup, replacement);
        } else {
          throw new Error(`Failed to adjust the bytecode.`);
        }
      }

      return "0x" + bytecode;
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  private _getUserGas = (): Promise<string> => {
    return new Promise((resolve) => {
      this.once("userGasReceived", (gas: string) => {
        resolve(gas);
      });
    });
  };
}

export default Executor;



===== FILE: src/lib/TransactionHistory.ts =====
import { TransactionHistoryRow } from "../types";

class TransactionHistory {
  public currentAccount?: string;
  public rows: TransactionHistoryRow[] = [];

  constructor() {}

  public addRow = (row: TransactionHistoryRow): void => {
    this.rows.unshift(row);
  };

  public clear = () => {
    this.rows = [];
  };
}

export default TransactionHistory;



===== FILE: src/lib/VirtualizationUnit.ts =====
import EventEmitter from "events";
import { FMT_BYTES, FMT_NUMBER, type Web3 } from "web3";
import { V_UNIT_ABI, V_UNIT_BYTECODE } from "../constants";
import { ContractTransactionStatus } from "../types";

class VirtualizationUnit extends EventEmitter {
  public contracts: string[] = [];
  public contractTransactionStatus?: ContractTransactionStatus;
  public currentContract?: string;
  public estimating = false;
  public gasEstimate?: string;

  constructor() {
    super();
  }

  public deploy = async (from: string, web3: Web3): Promise<void> => {
    try {
      this.estimating = true;

      this.emit("sync");

      const contract = new web3.eth.Contract(V_UNIT_ABI);

      const deployment = contract.deploy({ data: V_UNIT_BYTECODE });

      this.gasEstimate = await deployment.estimateGas(
        { from },
        { number: FMT_NUMBER.STR, bytes: FMT_BYTES.HEX },
      );

      this.estimating = false;

      this.emit("gasEstimated");

      const gas = await this._getUserGas();

      deployment
        .send({ from, gas })
        .on("sending", () => {
          this.contractTransactionStatus = "sending";
          this.emit("sync");
        })
        .on("sent", () => {
          this.contractTransactionStatus = "sent";
          this.emit("sync");
        })
        .on("confirmation", ({ receipt }) => {
          this.clearDeployment();

          const { contractAddress } = receipt;

          if (contractAddress) {
            this.contracts.push(contractAddress);
            this.currentContract = contractAddress;

            this.emit("sync");
          }

          throw new Error("Invalid contract address.");
        })
        .on("error", (e) => {
          this.contractTransactionStatus = "error";
          this.emit("sync");

          throw e;
        });
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  public clearDeployment = (): void => {
    this.gasEstimate = undefined;
    this.contractTransactionStatus = undefined;
  };

  // -------------------- Private --------------------

  private _getUserGas = (): Promise<string> => {
    return new Promise((resolve) => {
      this.once("userGasReceived", (gas: string) => {
        resolve(gas);
      });
    });
  };
}

export default VirtualizationUnit;



===== FILE: src/lib/Wallet.ts =====
import { ProviderAccounts } from "@walletconnect/universal-provider";
import UniversalProvider from "@walletconnect/universal-provider/dist/types/UniversalProvider";
import { SUPPORTED_CHAINS } from "../constants";

class Wallet {
  private static readonly _EIP155_EVENTS = ["chainChanged", "accountsChanged"];
  private static readonly _EIP155_METHODS = [
    "eth_sendTransaction",
    "eth_signTransaction",
    "eth_sign",
    "personal_sign",
    "eth_signTypedData",
  ];

  public accounts?: ProviderAccounts;
  public chain = SUPPORTED_CHAINS.find((chain) => chain.id === 11_155_111); // sepolia
  public currentAccount?: string;
  public isConnected?: boolean;
  public uri?: string;

  private _controller = new AbortController();

  constructor(private readonly _provider: UniversalProvider) {}

  public connect = async (id: number): Promise<void> => {
    try {
      this._controller.abort();

      this._controller.signal.addEventListener("abort", () => {
        this._provider.abortPairingAttempt();
        this._provider.cleanupPendingPairings({ deletePairings: true });

        this.uri = undefined;

        throw new Error("Aborted!");
      });

      await this.disconnect();

      const chain = SUPPORTED_CHAINS.find((c) => c.id === id);

      if (!chain) {
        throw new Error("invalid chain id.");
      }

      this.chain = chain; // important to sync correct state when provider emits uri

      await this._provider.connect({
        namespaces: {
          eip155: {
            methods: Wallet._EIP155_METHODS,
            chains: [`eip155:${chain.id}`],
            events: Wallet._EIP155_EVENTS,
            rpcMap: {
              [chain.id]: chain.rpcUrls.infura
                ? `${chain.rpcUrls.infura.http[0]}/293dd006da85467bbcb9ee8fd02cb40b`
                : chain.rpcUrls.default.http[0],
            },
          },
        },
      });

      this.accounts = await this._provider.enable();
      this.chain = chain;
      this.isConnected = true;
      this.uri = undefined;

      if (this.accounts.length > 0) {
        this.currentAccount = this.accounts[0];
      }
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }
  };

  public disconnect = async (): Promise<void> => {
    try {
      if (this._provider.session) {
        await this._provider.disconnect();
      }

      this.isConnected = false;
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      }

      throw new Error(JSON.stringify(e));
    }

    this.accounts = undefined;
    this.currentAccount = undefined;
    this.isConnected = false;
  };
}

export default Wallet;



===== FILE: src/test/runTest.ts =====
import * as path from "path";

import { runTests } from "@vscode/test-electron";

async function main() {
  try {
    // The folder containing the Extension Manifest package.json
    // Passed to `--extensionDevelopmentPath`
    const extensionDevelopmentPath = path.resolve(__dirname, "../../");

    // The path to test runner
    // Passed to --extensionTestsPath
    const extensionTestsPath = path.resolve(__dirname, "./suite/index");

    // Download VS Code, unzip it and run the integration test
    await runTests({ extensionDevelopmentPath, extensionTestsPath });
  } catch (err) {
    console.error("Failed to run tests", err);
    process.exit(1);
  }
}

main();



===== FILE: src/test/suite/extension.test.ts =====
import assert from "assert";

// You can import and use all API from the 'vscode' module
// as well as import your extension to test it
import vscode from "vscode";
// import * as myExtension from '../../extension';

suite("Extension Test Suite", () => {
  vscode.window.showInformationMessage("Start all tests.");

  test("Sample test", () => {
    assert.strictEqual(-1, [1, 2, 3].indexOf(5));
    assert.strictEqual(-1, [1, 2, 3].indexOf(0));
  });
});



===== FILE: src/test/suite/index.ts =====
import glob from "glob";
import Mocha from "mocha";
import path from "path";

export function run(): Promise<void> {
  // Create the mocha test
  const mocha = new Mocha({
    ui: "tdd",
    color: true,
  });

  const testsRoot = path.resolve(__dirname, "..");

  return new Promise((c, e) => {
    glob("**/**.test.js", { cwd: testsRoot }, (err, files) => {
      if (err) {
        return e(err);
      }

      // Add files to the test suite
      files.forEach((f) => mocha.addFile(path.resolve(testsRoot, f)));

      try {
        // Run the mocha test
        mocha.run((failures) => {
          if (failures > 0) {
            e(new Error(`${failures} tests failed.`));
          } else {
            c();
          }
        });
      } catch (err) {
        console.error(err);
        e(err);
      }
    });
  });
}



===== FILE: src/types/index.ts =====
import { Chain } from "@wagmi/chains";
import { ProviderAccounts } from "@walletconnect/universal-provider";
import { WebviewView } from "vscode";
import { Bytes } from "web3";

type BytecodeStructure = {
  bytecode: string;
  key: string;
  nargs: number;
};

type ContractTransactionStatus =
  | "confirmation"
  | "error"
  | "receipt"
  | "sending"
  | "sent"
  | "transactionHash";

type ExecutorData = {
  compiling: boolean;
  contractTransactionStatus?: ContractTransactionStatus;
  currentFile?: ExecutorFile;
  disabled: boolean;
  estimating: boolean;
  gasEstimate?: string;
  nargs?: number;
  userFile?: ExecutorFile;
};

type ExecutorFile = {
  content: string;
  extension: SupportedLanguage;
  path: string;
};

type TransactionHistoryData = {
  disabled: boolean;
  rows: TransactionHistoryRow[];
};

type TransactionHistoryRow = {
  output: Bytes;
  transactionHash: Bytes;
  transactionUrl: string;
};

type SupportedLanguage = "c";

type ViewMap = Record<ViewType, WebviewView>;

type ViewType =
  | "executor"
  | "transactionHistory"
  | "virtualizationUnit"
  | "wallet";

type VirtualizationUnitData = {
  contracts: string[];
  contractTransactionStatus?: ContractTransactionStatus;
  currentContract?: string;
  disabled: boolean;
  estimating: boolean;
  gasEstimate?: string;
};

type VsCodeApi = {
  postMessage(message: { type: string; value?: any }): void;
};

type WalletData = {
  accounts?: ProviderAccounts;
  chain: Chain;
  balance?: string;
  chains: Chain[];
  currentAccount?: string;
  isConnected?: boolean;
  uri?: string;
};

export {
  BytecodeStructure,
  ContractTransactionStatus,
  ExecutorData,
  ExecutorFile,
  SupportedLanguage,
  TransactionHistoryData,
  TransactionHistoryRow,
  ViewMap,
  ViewType,
  VirtualizationUnitData,
  VsCodeApi,
  WalletData,
};



===== FILE: src/views/Executor.tsx =====
import {
  VSCodeButton,
  VSCodeDivider,
  VSCodeRadio,
  VSCodeRadioGroup,
  VSCodeTextField,
} from "@vscode/webview-ui-toolkit/react";
import { useCallback, useEffect, useState } from "react";
import { createRoot } from "react-dom/client";
import { TRANSACTION_STATUS_LABEL } from "../constants";
import { ExecutorData, VsCodeApi } from "../types";

declare const acquireVsCodeApi: () => VsCodeApi;
const vscodeApi = acquireVsCodeApi();

type GasOption = "buffer" | "custom" | "estimate";

const Executor = (): JSX.Element => {
  const [_compiling, setCompiling] = useState<ExecutorData["compiling"]>(false);
  const [_contractTransactionStatus, setContractTransactionStatus] =
    useState<ExecutorData["contractTransactionStatus"]>(undefined);
  const [_currentFile, setCurrentFile] =
    useState<ExecutorData["currentFile"]>();
  const [_disabled, setDisabled] = useState<ExecutorData["disabled"]>(true);
  const [_estimating, setEstimating] =
    useState<ExecutorData["estimating"]>(false);
  const [_gasEstimate, setGasEstimate] =
    useState<ExecutorData["gasEstimate"]>();
  const [_nargs, setNargs] = useState<ExecutorData["nargs"]>();
  const [_userFile, setUserFile] = useState<ExecutorData["userFile"]>();
  const [args, setArgs] = useState<string[]>([]);
  const [compileFormOpen, setCompileFormOpen] = useState<boolean>(false);
  const [gas, setGas] = useState<string>("");
  const [gasEstimated, setGasEstimated] = useState<boolean>(false);
  const [gasOption, setGasOption] = useState<GasOption>("buffer");
  const [userNargs, setUserNargs] = useState<string>("0");

  const calculateBuffer = (gas: string): string =>
    ((BigInt(gas) * BigInt(115)) / BigInt(100)).toString();

  const getActiveFile = (): void => {
    vscodeApi.postMessage({ type: "getActiveFile" });
  };

  const onCompile = (): void => {
    vscodeApi.postMessage({ type: "compile", value: userNargs });
    setArgs(Array(Number(userNargs)).fill(""));
    setCompileFormOpen(false);
  };

  const onCompileCancel = (): void => {
    setCompileFormOpen(false);
    setUserNargs("0");
    vscodeApi.postMessage({ type: "cancelCompile" });
  };

  const onEstimate = (): void => {
    vscodeApi.postMessage({ type: "estimate", value: JSON.stringify(args) });
  };

  const onExecute = (): void => {
    vscodeApi.postMessage({ type: "execute", value: gas });
  };

  const onExecuteCancel = (): void => {
    vscodeApi.postMessage({ type: "cancelExecution" });
    setArgs(Array.from({ length: Number(_nargs) }));
    setGas("");
    setGasEstimated(false);
    setGasOption("buffer");
  };

  const onGasOptionChange = useCallback(
    (option: GasOption) => {
      setGasOption(option);

      if (_gasEstimate) {
        switch (option) {
          case "buffer":
            setGas(calculateBuffer(_gasEstimate));
            break;
          case "custom":
            setGas(_gasEstimate);
            break;
          case "estimate":
            setGas(_gasEstimate);
            break;
          default:
            break;
        }
      }
    },
    [_gasEstimate],
  );

  const selectFile = (): void => {
    vscodeApi.postMessage({ type: "selectFile" });
  };

  const updateState = useCallback((data: ExecutorData): void => {
    const {
      compiling,
      contractTransactionStatus,
      currentFile,
      disabled,
      gasEstimate,
      nargs,
      userFile,
    } = data;

    setCompiling(compiling);
    setContractTransactionStatus(contractTransactionStatus);
    setCurrentFile(currentFile);
    setDisabled(disabled);
    setGasEstimate(gasEstimate);
    setNargs(nargs);
    setUserFile(userFile);

    if (gasEstimate) {
      setGasEstimated(true);
    }

    if (compiling) {
      setCompileFormOpen((prevOpen) => {
        if (compiling) {
          return true;
        }

        return prevOpen;
      });
    } else {
      setCompiling((prevCompiling) => {
        if (prevCompiling && !compiling && userFile) {
          setCompileFormOpen(false);
          return false;
        }

        return compiling;
      });
    }

    setGas((prevGas) => {
      if (!prevGas && gasEstimate) {
        return gasEstimate;
      }

      return prevGas;
    });
  }, []);

  useEffect(() => {
    window.addEventListener("message", (event) => updateState(event.data));
    vscodeApi.postMessage({ type: "ready" });

    return () => {
      window.removeEventListener("message", (event) => updateState(event.data));
    };
  }, [updateState]);

  return _disabled ? (
    <div className="container">
      <div className="width-constraint">
        <span className="disabled-text">
          You need to select an account and a virtualization unit to execute
          code.
        </span>
      </div>
    </div>
  ) : (
    <div className="container">
      {compileFormOpen ? (
        <>
          <VSCodeTextField
            className="width-constraint"
            placeholder={_userFile ? _userFile.path : "Upload file"}
            readOnly
            title={_userFile?.path || undefined}
          >
            File
            <section slot="end">
              <VSCodeButton
                appearance="icon"
                className="button-codicon"
                onClick={selectFile}
                title="Upload file"
              >
                <i className="codicon codicon-cloud-upload" />
              </VSCodeButton>
            </section>
          </VSCodeTextField>
          <VSCodeTextField
            className="width-constraint"
            onInput={(e) => setUserNargs((e.target as HTMLInputElement).value)}
            value={userNargs}
          >
            Number of arguments
          </VSCodeTextField>
          <div className="width-constraint action-button-container">
            <VSCodeButton
              appearance="secondary"
              disabled={_compiling}
              onClick={onCompileCancel}
            >
              Cancel
            </VSCodeButton>
            <VSCodeButton
              appearance="primary"
              disabled={_compiling}
              onClick={onCompile}
            >
              {_compiling ? "Compiling..." : "Compile"}
            </VSCodeButton>
          </div>
        </>
      ) : (
        <div className="width-constraint">
          <VSCodeButton
            appearance="primary"
            className="block-width"
            disabled={
              _contractTransactionStatus === "sending" ||
              _contractTransactionStatus === "sent"
            }
            onClick={() => {
              setCompileFormOpen(true);
              getActiveFile();
            }}
          >
            Compile Bytecode
          </VSCodeButton>
        </div>
      )}
      <VSCodeDivider className="width-constraint" />
      {_currentFile && _nargs ? (
        <>
          <VSCodeTextField
            className="width-constraint"
            readOnly
            title={_currentFile.path}
            value={_currentFile.path}
          >
            File
          </VSCodeTextField>
          {args.map((_, i) => (
            <VSCodeTextField
              className="width-constraint"
              disabled={
                _contractTransactionStatus === "sending" ||
                _contractTransactionStatus === "sent"
              }
              key={i}
              onInput={(e) => {
                setArgs((currentArgs) => {
                  const newArgs = [...currentArgs];
                  newArgs[i] = (e.target as HTMLInputElement).value;
                  return newArgs;
                });
                setGasEstimated(false);
              }}
              value={args[i]}
            >
              Argument {i + 1}
            </VSCodeTextField>
          ))}
          {!gasEstimated ? (
            <div className="width-constraint">
              <VSCodeButton
                appearance="primary"
                className="block-width"
                disabled={_estimating}
                onClick={onEstimate}
              >
                {_estimating ? "Estimating Gas" : "Estimate Gas"}
              </VSCodeButton>
            </div>
          ) : (
            <>
              {_gasEstimate ? (
                <>
                  <VSCodeRadioGroup
                    disabled={
                      _contractTransactionStatus === "sending" ||
                      _contractTransactionStatus === "sent"
                    }
                    onChange={(e) => {
                      onGasOptionChange(
                        (e.target as HTMLInputElement).value as GasOption,
                      );
                    }}
                    orientation="vertical"
                    value={gasOption}
                  >
                    <label slot="label">Gas</label>
                    <VSCodeRadio value="estimate">
                      Estimated gas{" "}
                      <span className="disabled-text">{_gasEstimate}</span>
                    </VSCodeRadio>
                    <VSCodeRadio value="buffer">
                      Estimated gas + 15% buffer{" "}
                      <span className="disabled-text">
                        {calculateBuffer(_gasEstimate)}
                      </span>
                    </VSCodeRadio>
                    <VSCodeRadio value="custom">Custom</VSCodeRadio>
                  </VSCodeRadioGroup>
                  {gasOption === "custom" ? (
                    <VSCodeTextField
                      className="custom-gas-field width-constraint"
                      disabled={
                        _contractTransactionStatus === "sending" ||
                        _contractTransactionStatus === "sent"
                      }
                      onInput={(e) =>
                        setGas((e.target as HTMLInputElement).value)
                      }
                      value={gas}
                    />
                  ) : null}
                  <div className="width-constraint action-button-container">
                    <VSCodeButton
                      appearance="secondary"
                      disabled={
                        _contractTransactionStatus === "sending" ||
                        _contractTransactionStatus === "sent"
                      }
                      onClick={onExecuteCancel}
                    >
                      Cancel
                    </VSCodeButton>
                    <VSCodeButton
                      appearance="primary"
                      disabled={
                        !gas || _contractTransactionStatus !== undefined
                      }
                      onClick={onExecute}
                    >
                      {_contractTransactionStatus
                        ? TRANSACTION_STATUS_LABEL[_contractTransactionStatus]
                        : "Execute"}
                    </VSCodeButton>
                  </div>
                </>
              ) : null}
            </>
          )}
        </>
      ) : (
        <div className="width-constraint">
          <span className="disabled-text">
            You need to compile your file before executing it.
          </span>
        </div>
      )}
    </div>
  );
};

const root = createRoot(document.getElementById("root") as HTMLElement);
root.render(<Executor />);



===== FILE: src/views/TransactionHistory.tsx =====
import {
  VSCodeDataGrid,
  VSCodeDataGridCell,
  VSCodeDataGridRow,
  VSCodeLink,
} from "@vscode/webview-ui-toolkit/react";
import { useCallback, useEffect, useState } from "react";
import { createRoot } from "react-dom/client";
import { TransactionHistoryData, VsCodeApi } from "../types";

declare const acquireVsCodeApi: () => VsCodeApi;
const vscodeApi = acquireVsCodeApi();

const TransactionHistory = (): JSX.Element => {
  const [_disabled, setDisabled] =
    useState<TransactionHistoryData["disabled"]>(true);
  const [_rows, setRows] = useState<TransactionHistoryData["rows"]>([]);

  const updateState = useCallback((data: TransactionHistoryData): void => {
    const { disabled, rows } = data;

    setDisabled(disabled);
    setRows(rows);
  }, []);

  useEffect(() => {
    window.addEventListener("message", (event) => updateState(event.data));
    vscodeApi.postMessage({ type: "ready" });

    return () => {
      window.removeEventListener("message", (event) => updateState(event.data));
    };
  }, [updateState]);

  return _disabled ? (
    <div className="container">
      <div className="width-constraint">
        <span className="disabled-text">
          Connect wallet to see transaction history.
        </span>
      </div>
    </div>
  ) : (
    <div className="container">
      {_rows.length > 0 ? (
        <div className="width-constraint">
          <VSCodeDataGrid id="tx-data-grid">
            <VSCodeDataGridRow row-type="sticky-header">
              <VSCodeDataGridCell cell-type="columnheader" grid-column="1">
                Transaction Hash
              </VSCodeDataGridCell>
              <VSCodeDataGridCell cell-type="columnheader" grid-column="2">
                Output
              </VSCodeDataGridCell>
            </VSCodeDataGridRow>
            {_rows.map((row) => (
              <VSCodeDataGridRow key={row.transactionHash.toString()}>
                <VSCodeDataGridCell grid-column="1">
                  <VSCodeLink href={row.transactionUrl}>
                    {row.transactionHash.toString()}
                  </VSCodeLink>
                </VSCodeDataGridCell>
                <VSCodeDataGridCell grid-column="2">
                  {parseInt(row.output.toString(), 16)}
                </VSCodeDataGridCell>
              </VSCodeDataGridRow>
            ))}
          </VSCodeDataGrid>
        </div>
      ) : (
        <div className="width-constraint">
          <span className="disabled-text">Transaction history is empty.</span>
        </div>
      )}
    </div>
  );
};

const root = createRoot(document.getElementById("root") as HTMLElement);
root.render(<TransactionHistory />);



===== FILE: src/views/VirtualizationUnit.tsx =====
import {
  VSCodeButton,
  VSCodeDivider,
  VSCodeDropdown,
  VSCodeOption,
  VSCodeRadio,
  VSCodeRadioGroup,
  VSCodeTextField,
} from "@vscode/webview-ui-toolkit/react";
import { useCallback, useEffect, useState } from "react";
import { createRoot } from "react-dom/client";
import { TRANSACTION_STATUS_LABEL } from "../constants";
import { VirtualizationUnitData, VsCodeApi } from "../types";

declare const acquireVsCodeApi: () => VsCodeApi;
const vscodeApi = acquireVsCodeApi();

type GasOption = "buffer" | "custom" | "estimate";

const VirtualizationUnit = (): JSX.Element => {
  const [_contracts, setContracts] = useState<
    VirtualizationUnitData["contracts"]
  >([]);
  const [_contractTransactionStatus, setContractTransactionStatus] =
    useState<VirtualizationUnitData["contractTransactionStatus"]>(undefined);
  const [_currentContract, setCurrentContract] =
    useState<VirtualizationUnitData["currentContract"]>(undefined);
  const [_disabled, setDisabled] =
    useState<VirtualizationUnitData["disabled"]>(true);
  const [_estimating, setEstimating] =
    useState<VirtualizationUnitData["estimating"]>(false);
  const [_gasEstimate, setGasEstimate] =
    useState<VirtualizationUnitData["gasEstimate"]>("");
  const [gas, setGas] = useState<string>("");
  const [gasOption, setGasOption] = useState<GasOption>("buffer");

  const calculateBuffer = (gas: string): string =>
    ((BigInt(gas) * BigInt(115)) / BigInt(100)).toString();

  const onCancel = (): void => {
    vscodeApi.postMessage({ type: "clearDeployment" });
  };

  const onContractChange = (contract: string): void => {
    vscodeApi.postMessage({ type: "setContract", value: contract });
  };

  const onDeploy = (): void => {
    vscodeApi.postMessage({ type: "deploy" });
  };

  const onGasOptionChange = useCallback(
    (option: GasOption) => {
      setGasOption(option);

      if (_gasEstimate) {
        switch (option) {
          case "buffer":
            setGas(calculateBuffer(_gasEstimate));
            break;
          case "custom":
            setGas(_gasEstimate);
            break;
          case "estimate":
            setGas(_gasEstimate);
            break;
          default:
            break;
        }
      }
    },
    [_gasEstimate],
  );

  const onSend = useCallback(() => {
    vscodeApi.postMessage({ type: "send", value: gas });
  }, [gas]);

  const updateState = useCallback((data: VirtualizationUnitData): void => {
    const {
      contracts,
      contractTransactionStatus,
      currentContract,
      disabled,
      estimating,
      gasEstimate,
    } = data;

    setContracts(contracts);
    setContractTransactionStatus(contractTransactionStatus);
    setCurrentContract(currentContract);
    setDisabled(disabled);
    setEstimating(estimating);
    setGasEstimate(gasEstimate);

    setGas((prevGas) => {
      if (!prevGas && gasEstimate) {
        return gasEstimate;
      }
      return prevGas;
    });
  }, []);

  useEffect(() => {
    window.addEventListener("message", (event) => updateState(event.data));
    vscodeApi.postMessage({ type: "ready" });

    return () => {
      window.removeEventListener("message", (event) => updateState(event.data));
    };
  }, [updateState]);

  return _disabled ? (
    <div className="container">
      <div className="width-constraint">
        <span className="disabled-text">
          Connect wallet to deploy virtualization units.
        </span>
      </div>
    </div>
  ) : (
    <div className="container">
      {_gasEstimate ? (
        <>
          <VSCodeRadioGroup
            disabled={
              _contractTransactionStatus === "sending" ||
              _contractTransactionStatus === "sent"
            }
            onChange={(e) => {
              onGasOptionChange(
                (e.target as HTMLInputElement).value as GasOption,
              );
            }}
            orientation="vertical"
            value={gasOption}
          >
            <label slot="label">Gas</label>
            <VSCodeRadio value="estimate">
              Estimated gas{" "}
              <span className="disabled-text">{_gasEstimate}</span>
            </VSCodeRadio>
            <VSCodeRadio value="buffer">
              Estimated gas + 15% buffer{" "}
              <span className="disabled-text">
                {calculateBuffer(_gasEstimate)}
              </span>
            </VSCodeRadio>
            <VSCodeRadio value="custom">Custom</VSCodeRadio>
          </VSCodeRadioGroup>
          {gasOption === "custom" ? (
            <VSCodeTextField
              className="custom-gas-field width-constraint"
              disabled={
                _contractTransactionStatus === "sending" ||
                _contractTransactionStatus === "sent"
              }
              onInput={(e) => setGas((e.target as HTMLInputElement).value)}
              value={gas}
            />
          ) : null}
          <div className="width-constraint action-button-container">
            <VSCodeButton
              appearance="secondary"
              disabled={
                _contractTransactionStatus === "sending" ||
                _contractTransactionStatus === "sent"
              }
              onClick={onCancel}
            >
              Cancel
            </VSCodeButton>
            <VSCodeButton
              appearance="primary"
              disabled={_contractTransactionStatus !== undefined}
              onClick={onSend}
            >
              {_contractTransactionStatus
                ? TRANSACTION_STATUS_LABEL[_contractTransactionStatus]
                : "Send"}
            </VSCodeButton>
          </div>
        </>
      ) : (
        <div className="width-constraint">
          <VSCodeButton
            appearance="primary"
            className="block-width"
            disabled={_estimating}
            onClick={onDeploy}
          >
            {_estimating ? "Estimating Gas" : "Deploy"}
          </VSCodeButton>
        </div>
      )}
      <VSCodeDivider className="width-constraint" />
      <div className="dropdown-container">
        <label htmlFor="contract">Contract</label>
        <VSCodeDropdown
          className="width-constraint"
          disabled={!_contracts?.length}
          id="contract"
          onChange={(e) =>
            onContractChange((e.target as HTMLSelectElement).value)
          }
          value={_contracts?.length ? _currentContract : "empty"}
        >
          {_contracts.length ? (
            _contracts.map((contract) => (
              <VSCodeOption key={contract} value={contract}>
                {contract}
              </VSCodeOption>
            ))
          ) : (
            <VSCodeOption value="empty">No contracts available.</VSCodeOption>
          )}
        </VSCodeDropdown>
      </div>
    </div>
  );
};

const root = createRoot(document.getElementById("root") as HTMLElement);
root.render(<VirtualizationUnit />);



===== FILE: src/views/Wallet.tsx =====
import {
  VSCodeButton,
  VSCodeDivider,
  VSCodeDropdown,
  VSCodeLink,
  VSCodeOption,
  VSCodeProgressRing,
  VSCodeTextField,
} from "@vscode/webview-ui-toolkit/react";
import { QRCodeSVG } from "qrcode.react";
import { useCallback, useEffect, useState } from "react";
import { createRoot } from "react-dom/client";
import { VsCodeApi, WalletData } from "../types";

declare const acquireVsCodeApi: () => VsCodeApi;
const vscodeApi = acquireVsCodeApi();

const Wallet = (): JSX.Element => {
  const [_accounts, setAccounts] = useState<WalletData["accounts"]>();
  const [_chain, setChain] = useState<WalletData["chain"]>();
  const [_balance, setBalance] = useState<WalletData["balance"]>();
  const [_chains, setChains] = useState<WalletData["chains"]>();
  const [_currentAccount, setCurrentAccount] =
    useState<WalletData["currentAccount"]>();
  const [_isConnected, setIsConnected] = useState<WalletData["isConnected"]>();
  const [_uri, setUri] = useState<string | undefined>();
  const [loadingBalance, setLoadingBalance] = useState<boolean>(false);

  const connect = useCallback((chainId: number) => {
    setUri(undefined);

    vscodeApi.postMessage({
      type: "connect",
      value: chainId,
    });
  }, []);

  const disconnect = (): void => {
    vscodeApi.postMessage({ type: "disconnect" });
  };

  const onAccountChange = useCallback(
    (account: string): void => {
      if (account !== _currentAccount) {
        setCurrentAccount(account);
        setLoadingBalance(true);

        vscodeApi.postMessage({ type: "changeAccount", value: account });
      }
    },
    [_currentAccount],
  );

  const onChainChange = useCallback(
    (chainId: string): void => {
      if (chainId !== _chain?.id.toString()) {
        const chain = _chains?.find((c) => c.id.toString() === chainId);

        if (chain) {
          setChain(chain);
          setIsConnected(false);
          connect(chain.id);
        }
      }
    },
    [_chain?.id, _chains, connect],
  );

  const updateState = useCallback(
    (data: WalletData): void => {
      const {
        accounts,
        balance,
        chain,
        chains,
        currentAccount,
        isConnected,
        uri,
      } = data;

      setAccounts(accounts);
      setBalance(balance);
      setChain(chain);
      setChains(chains);
      setCurrentAccount(currentAccount);
      setIsConnected(isConnected);
      setUri(uri);
      setLoadingBalance(false);

      if (chain && !isConnected && !uri) {
        connect(chain.id);
      }
    },
    [connect],
  );

  useEffect(() => {
    window.addEventListener("message", (event) => updateState(event.data));
    vscodeApi.postMessage({ type: "ready" });

    return () => {
      window.removeEventListener("message", (event) => updateState(event.data));
    };
  }, [updateState]);

  return _chains && _chain ? (
    <div className="container">
      <div className="dropdown-container">
        <label htmlFor="chain">Chain</label>
        <VSCodeDropdown
          className="width-constraint"
          disabled={!_chains.length}
          id="chain"
          onChange={(e) => onChainChange((e.target as HTMLSelectElement).value)}
          value={_chain.id.toString()}
        >
          {_chains.map((chain) => (
            <VSCodeOption key={chain.id} value={chain.id.toString()}>
              {chain.name}
            </VSCodeOption>
          ))}
        </VSCodeDropdown>
      </div>
      {!_isConnected ? (
        <>
          <div className="qrcode-container">
            {_uri ? (
              <QRCodeSVG
                className="qrcode-svg"
                includeMargin
                size={380}
                value={_uri}
              />
            ) : (
              <VSCodeProgressRing />
            )}
          </div>
          <div className="width-constraint">
            <span>
              <VSCodeLink href="https://walletconnect.com/explorer?type=wallet&chains=eip155%3A1">
                View list of 300+ supported wallets
              </VSCodeLink>{" "}
              through the WalletConnect protocol.
            </span>
          </div>
        </>
      ) : (
        <>
          <div className="dropdown-container">
            <label htmlFor="account">Account</label>
            <VSCodeDropdown
              className="width-constraint"
              disabled={!_accounts?.length}
              id="account"
              onChange={(e) =>
                onAccountChange((e.target as HTMLSelectElement).value)
              }
              value={_accounts?.length ? _currentAccount : "empty"}
            >
              {_accounts && _accounts.length > 0 ? (
                _accounts.map((acc) => (
                  <VSCodeOption key={acc} value={acc}>
                    {acc}
                  </VSCodeOption>
                ))
              ) : (
                <VSCodeOption value="empty">
                  No accounts available.
                </VSCodeOption>
              )}
            </VSCodeDropdown>
          </div>
          <div>
            {loadingBalance ? (
              <>
                <label>Balance (wei)</label>
                <VSCodeProgressRing />
              </>
            ) : (
              <VSCodeTextField
                className="width-constraint"
                readOnly
                value={_balance ?? "0"}
              >
                Balance (wei)
              </VSCodeTextField>
            )}
          </div>
          <VSCodeDivider className="width-constraint" />
          <div className="width-constraint">
            <VSCodeButton
              appearance="primary"
              className="block-width"
              onClick={disconnect}
            >
              Disconnect
            </VSCodeButton>
          </div>
        </>
      )}
    </div>
  ) : (
    <div className="progress-ring-container">
      <VSCodeProgressRing />
    </div>
  );
};

const root = createRoot(document.getElementById("root") as HTMLElement);
root.render(<Wallet />);



===== FILE: tsconfig.json =====
{
  "compilerOptions": {
    "jsx": "react-jsx",
    "esModuleInterop": true,
    "module": "commonjs",
    "target": "ES2020",
    "lib": ["ES2020", "DOM"],
    "sourceMap": true,
    "rootDir": "src",
    "strict": true /* enable all strict type-checking options */
    /* Additional Checks */
    // "noImplicitReturns": true, /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true, /* Report errors for fallthrough cases in switch statement. */
    // "noUnusedParameters": true,  /* Report errors on unused parameters. */
  }
}



===== FILE: vsc-extension-quickstart.md =====
# Welcome to your VS Code Extension

## What's in the folder

* This folder contains all of the files necessary for your extension.
* `package.json` - this is the manifest file in which you declare your extension and command.
  * The sample plugin registers a command and defines its title and command name. With this information VS Code can show the command in the command palette. It doesn’t yet need to load the plugin.
* `src/extension.ts` - this is the main file where you will provide the implementation of your command.
  * The file exports one function, `activate`, which is called the very first time your extension is activated (in this case by executing the command). Inside the `activate` function we call `registerCommand`.
  * We pass the function containing the implementation of the command as the second parameter to `registerCommand`.

## Setup

* install the recommended extensions (amodio.tsl-problem-matcher and dbaeumer.vscode-eslint)


## Get up and running straight away

* Press `F5` to open a new window with your extension loaded.
* Run your command from the command palette by pressing (`Ctrl+Shift+P` or `Cmd+Shift+P` on Mac) and typing `Hello World`.
* Set breakpoints in your code inside `src/extension.ts` to debug your extension.
* Find output from your extension in the debug console.

## Make changes

* You can relaunch the extension from the debug toolbar after changing code in `src/extension.ts`.
* You can also reload (`Ctrl+R` or `Cmd+R` on Mac) the VS Code window with your extension to load your changes.


## Explore the API

* You can open the full set of our API when you open the file `node_modules/@types/vscode/index.d.ts`.

## Run tests

* Open the debug viewlet (`Ctrl+Shift+D` or `Cmd+Shift+D` on Mac) and from the launch configuration dropdown pick `Extension Tests`.
* Press `F5` to run the tests in a new window with your extension loaded.
* See the output of the test result in the debug console.
* Make changes to `src/test/suite/extension.test.ts` or create new test files inside the `test/suite` folder.
  * The provided test runner will only consider files matching the name pattern `**.test.ts`.
  * You can create folders inside the `test` folder to structure your tests any way you want.

## Go further

* Reduce the extension size and improve the startup time by [bundling your extension](https://code.visualstudio.com/api/working-with-extensions/bundling-extension).
* [Publish your extension](https://code.visualstudio.com/api/working-with-extensions/publishing-extension) on the VS Code extension marketplace.
* Automate builds by setting up [Continuous Integration](https://code.visualstudio.com/api/working-with-extensions/continuous-integration).



===== FILE: webpack.config.js =====
//@ts-check
"use strict";

const path = require("path");
const webpack = require("webpack");
const nodeExternals = require("webpack-node-externals");

//@ts-check
/** @typedef {import('webpack').Configuration} WebpackConfig **/

/** @type WebpackConfig */
const extensionConfig = {
  target: "node", // VS Code extensions run in a Node.js-context 📖 -> https://webpack.js.org/configuration/node/
  mode: "none", // this leaves the source code as close as possible to the original (when packaging we set this to 'production')

  entry: "./src/extension.ts", // the entry point of this extension, 📖 -> https://webpack.js.org/configuration/entry-context/
  output: {
    // the bundle is stored in the 'dist' folder (check package.json), 📖 -> https://webpack.js.org/configuration/output/
    path: path.resolve(__dirname, "dist"),
    filename: "extension.js",
    libraryTarget: "commonjs2",
  },
  externalsPresets: { node: true },
  externals: [
    {
      vscode: "commonjs vscode", // the vscode-module is created on-the-fly and must be excluded. Add other modules that cannot be webpack'ed, 📖 -> https://webpack.js.org/configuration/externals/
      // modules added here also need to be added in the .vscodeignore file
    },
    nodeExternals(),
  ],
  resolve: {
    // support reading TypeScript and JavaScript files, 📖 -> https://github.com/TypeStrong/ts-loader
    extensions: [".ts", ".js"],
  },
  module: {
    rules: [
      {
        test: /\.ts$/,
        exclude: /node_modules/,
        use: [
          {
            loader: "ts-loader",
          },
        ],
      },
    ],
  },
  devtool: "nosources-source-map",
  infrastructureLogging: {
    level: "log", // enables logging required for problem matchers
  },
};

const commonViewConfig = (entryPath, outputFilename) => ({
  entry: entryPath,
  output: {
    filename: outputFilename,
    path: path.resolve(__dirname, "dist"),
  },
  resolve: {
    extensions: [".tsx", ".ts", ".js", ".json"],
  },
  module: {
    rules: [
      {
        test: /\.(ts|js)x?$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          options: {
            presets: [
              "@babel/preset-env",
              "@babel/preset-react",
              "@babel/preset-typescript",
            ],
          },
        },
      },
    ],
  },
  plugins: [
    new webpack.ProvidePlugin({
      React: "react",
    }),
  ],
  mode: "production",
});

module.exports = [
  extensionConfig,
  commonViewConfig("./src/views/Executor.tsx", "executor.js"),
  commonViewConfig(
    "./src/views/TransactionHistory.tsx",
    "transactionHistory.js",
  ),
  commonViewConfig(
    "./src/views/VirtualizationUnit.tsx",
    "virtualizationUnit.js",
  ),
  commonViewConfig("./src/views/Wallet.tsx", "wallet.js"),
];



